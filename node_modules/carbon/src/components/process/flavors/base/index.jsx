import React, {Component} from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import {ButtonIcon} from '../../../button-icon';
class Process extends Component {
    static propTypes ={
        stepArr: PropTypes.array.isRequired,
        currentStep: PropTypes.number.isRequired,
        activeStep: PropTypes.number,
        buttonText: PropTypes.string,
        children: PropTypes.any,
        onBefore: PropTypes.func,
        onAfter: PropTypes.func,
        isOpen: PropTypes.bool,
        haveButton: PropTypes.bool
    }

    static defaultProps = {
        stepArr: [
            {text: 'Unqualified'},
            {text: 'New'},
            {text: 'Working'},
            {text: 'Nurturing'},
            {text: 'Closed'}],
        buttonText: '标记完成',
        // choseText: '选择此状态',
        currentStep: 0,
        activeStep: 0,
        isOpen: true,
        haveButton: true
    }

    constructor(props) {
        super(props);
        this.state = {
            stepArr: props.stepArr,
            currentStep: props.currentStep,
            activeStep: props.activeStep || props.currentStep,
            isOpen: props.isOpen,
            haveButton: props.haveButton
        };
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.currentStep !== this.props.currentStep) {
            let NewCurrentStep = nextProps.currentStep;
            this.setState({currentStep: NewCurrentStep});
        }
    }

    _changeClassname(index) {
        let { currentStep, activeStep, stepArr} = this.state;
        let className = stepArr[index].className;
        if ( className ) {
            return className;
        }
        if ( index === currentStep) {
            return 'mcds-process__is-current';
        }
        if (index === activeStep) {
            return 'mcds-process__is-incurrent-active';
        } else if ( index > currentStep ) {
            return 'mcds-process__is-incomplete';
        } else if ( index < currentStep) {
            return 'mcds-process__is-complete';
        }
        if ( index === stepArr.length && currentStep === stepArr.length ) {
            return 'mcds-process__closed-won';
        } else if ( index === stepArr.length-1 && currentStep === -1) {
            return 'mcds-process__closed-lost';
        }

    }

    _changeActiveStep(index) {
        this.setState({activeStep: index});
    }

    _changecurrentStep() {
        let {currentStep, activeStep} = this.state;
        let {stepArr, onBefore, onAfter} = this.props;
        if (onBefore) {
            onBefore(activeStep, currentStep);
        }
        if (currentStep !== activeStep) {
            this.setState({currentStep: activeStep});
        } else if (currentStep === activeStep && activeStep < stepArr.length) {
            activeStep ++;
            currentStep = activeStep;
            this.setState({currentStep: currentStep, activeStep: activeStep});
        }
        if (onAfter) {
            onAfter(activeStep, currentStep);
        }
    }

    _changeToggle() {
        let isOpen = this.state.isOpen;
        this.setState({isOpen: !isOpen});
    }

    _renderTab() {
        let {activeStep, isOpen} = this.state;
        let {children} = this.props;
        let childrenElement = null;
        if (isOpen) {
            childrenElement = React.Children.map(children, (element, index) => {
                if (element.type === ProcessTabContent && index === activeStep) {
                    return element;
                }
                return null;
            });
        }
        return childrenElement;
    }

    _renderPath() {
        let { stepArr } = this.props;
        let { currentStep } = this.state;
        return stepArr.map((step, index) => {
            return (
                <li key={index} className={classnames('mcds-process__path-item', this._changeClassname(index))} onClick={this._changeActiveStep.bind(this, index)}>
                    <a className="mcds-process__path-link">
                        <span className="mcds-process__path-title"><icon className={classnames('mcds-process__icon', {'mcds-icon__checked': currentStep > index})} />{step.text}</span>
                    </a>
                </li>
            );
        });
    }
    render() {
        let { buttonText } = this.props;
        let {currentStep, activeStep, haveButton} = this.state;
        let isCurrent = currentStep === activeStep;
        let buttonElement = (
            <button
                className={classnames('mcds-process__button', { 'mcds-process__button-is-current': isCurrent, 'mcds-process__button-is-incurrent': !isCurrent })}
                onClick={this._changecurrentStep.bind(this)} >
                <i className={classnames('mcds-process__icon mcds-text__size-20', {'mcds-icon__checked-solid-20': currentStep > activeStep})} />
                {buttonText}
            </button>
        );
        return (
            <div className="mcds-process">
                <div className="mcds-grid mcds-process__path-wraper">
                    <ButtonIcon className={classnames('mcds-icon__container mcds-icon__container-32 mcds-button-icon__more mcds-process__trigger', {'mcds-process__trigger-open': this.state.isOpen})} icon="mcds-icon__arrow-line-20" onClick={this._changeToggle.bind(this)} />
                    <div className="mcds-process__path">
                        <ul className="mcds-process__path-nav">
                            {this._renderPath()}
                        </ul>
                    </div>
                    {
                        haveButton ? buttonElement : null
                    }
                </div>
                {this._renderTab()}
            </div>
        );
    }
}

const ProcessTabContent = ({className, children, ...others}) => (
    <div {...others} className={classnames('mcds-grid mcds-process__tab', className)}>
        {children}
    </div>
);

ProcessTabContent.propTypes = {
    className: PropTypes.string,
    children: PropTypes.any
};

export default {
    Process,
    ProcessTabContent
};
