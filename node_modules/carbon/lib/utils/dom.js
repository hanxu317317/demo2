'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isWindow = function isWindow(obj) {
    return obj !== null && obj === obj.window;
};
var getWindow = function getWindow(ele) {
    return isWindow(ele) ? ele : ele.nodeType === 9 && ele.defaultView;
};

var getWindowsSize = function getWindowsSize() {
    var result = {};
    // 获取窗口宽度
    if (window.innerWidth) {
        result.winWidth = window.innerWidth;
    } else if (document.body && document.body.clientWidth) {
        result.winWidth = document.body.clientWidth;
    }

    // 获取窗口高度
    if (window.innerHeight) {
        result.winHeight = window.innerHeight;
    } else if (document.body && document.body.clientHeight) {
        result.winHeight = document.body.clientHeight;
    }
    // 通过深入 Document 内部对 body 进行检测，获取窗口大小
    if (document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth) {
        result.winHeight = document.documentElement.clientHeight;
        result.winWidth = document.documentElement.clientWidth;
    }

    return result;
};
/**
 * [获取浏览k器中dom节点的位置与宽高]
 * @param  {[domElement]} element [dom节点]
 * @return {[Object]}         [{top,left,width,height}]
 */
var getDomOffset = function getDomOffset(element) {
    var doc = element && element.ownerDocument;
    var box = { top: 0, left: 0 };
    var docElement = void 0;
    var win = void 0;
    if (!doc) {
        return null;
    }
    docElement = doc.documentElement;

    if ((0, _typeof3.default)(element.getBoundingClientRect) !== (typeof undefined === 'undefined' ? 'undefined' : (0, _typeof3.default)(undefined))) {
        box = element.getBoundingClientRect();
    }

    win = getWindow(doc);
    return {
        top: box.top + win.pageYOffset - docElement.clientTop,
        left: box.left + win.pageXOffset - docElement.clientLeft,
        width: box.width,
        height: box.height
    };
};
var hasClass = function hasClass(obj, className) {
    if (!obj.className) {
        return false;
    }
    return obj.className.match(new RegExp('(\\s|^)' + className + '(\\s|$)'));
};

var removeClass = function removeClass(obj, className) {
    if (hasClass(obj, className)) {
        var reg = new RegExp('(\\s|^)' + className + '(\\s|$)');
        obj.className = obj.className.replace(reg, ' ');
    }
};

var addClass = function addClass(obj, className) {
    if (hasClass(obj, className)) {
        return false;
    }

    if (obj.className === '') {
        obj.className = className;
    } else {
        obj.className += ' ' + className;
    }
};
exports.default = {
    getDomOffset: getDomOffset,
    getWindowsSize: getWindowsSize,
    hasClass: hasClass,
    removeClass: removeClass,
    addClass: addClass
};
module.exports = exports['default'];