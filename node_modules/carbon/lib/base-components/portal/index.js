'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var KEYCODES = {
    ESCAPE: 27
}; /**
    * 所以我们需要的一个通用组件，它做如下的事情：
    * 可以声明式的写在一个组件中
    * 并不真正render在被声明的地方
    * 支持过渡动画
    * 那么，像modal、tooltip、notification等组件都是可以基于这个组件的。我们叫这个组件为Portal。
    * Portal这个东西我不知道怎么给它一个合适的中文名，最初是在ReactBootstrap的项目里看到，之后React-conf又提到，那么相信应该是一个通用的概念了，由于这个组件并不真正render在它被声明的地方，姑且就翻译为『传送门』吧....
    *
    * 基本用法
    * <Portal closeOnEsc={true} closeOnOutsideClick={true} openByClickOn={button}>
    *     <TestModal>
    *     </TestModal>
    * </Portal>
    */

var Portal = function (_React$Component) {
    (0, _inherits3.default)(Portal, _React$Component);

    function Portal() {
        (0, _classCallCheck3.default)(this, Portal);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Portal.__proto__ || (0, _getPrototypeOf2.default)(Portal)).call(this));

        _this.state = { active: false };
        _this.handleWrapperClick = _this.handleWrapperClick.bind(_this);
        _this.handleWrapperHover = _this.handleWrapperHover.bind(_this);
        _this.handleWrapperHoverOut = _this.handleWrapperHoverOut.bind(_this);
        _this.closePortal = _this.closePortal.bind(_this);
        _this.handleOutsideMouseClick = _this.handleOutsideMouseClick.bind(_this);
        _this.handleKeydown = _this.handleKeydown.bind(_this);
        _this.portal = null;
        _this.node = null;
        return _this;
    }

    (0, _createClass3.default)(Portal, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.closeOnEsc) {
                document.addEventListener('keydown', this.handleKeydown);
            }

            if (this.props.closeOnOutsideClick) {
                document.addEventListener('mouseup', this.handleOutsideMouseClick);
                document.addEventListener('touchstart', this.handleOutsideMouseClick);
            }

            if (this.props.isOpened) {
                this.openPortal();
            }
            this.mounted = true;
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            // portal's 'is open' state is handled through the prop isOpened
            if (typeof newProps.isOpened !== 'undefined') {
                if (newProps.isOpened) {
                    if (this.state.active) {
                        this.renderPortal(newProps);
                    } else {
                        this.openPortal(newProps);
                    }
                }
                if (!newProps.isOpened && this.state.active) {
                    this.closePortal();
                }
            }

            // portal handles its own 'is open' state
            if (typeof newProps.isOpened === 'undefined' && this.state.active) {
                this.renderPortal(newProps);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.props.closeOnEsc) {
                document.removeEventListener('keydown', this.handleKeydown);
            }

            if (this.props.closeOnOutsideClick) {
                document.removeEventListener('mouseup', this.handleOutsideMouseClick);
                document.removeEventListener('touchstart', this.handleOutsideMouseClick);
            }

            this.closePortal(true);
            this.mounted = false;
        }
    }, {
        key: 'handleWrapperClick',
        value: function handleWrapperClick(e) {
            e.preventDefault();
            e.stopPropagation();

            if (this.state.active) {
                return;
            }
            if (this.props.isOpened !== false) {
                this.openPortal();
            }
        }
    }, {
        key: 'handleWrapperHover',
        value: function handleWrapperHover(e) {
            var onMouseOver = this.props.onMouseOver;

            e.preventDefault();
            e.stopPropagation();
            if (this.state.active) {
                return;
            }
            if (onMouseOver) {
                onMouseOver(this.openPortal.bind(this));
            } else {
                if (this.props.isOpened !== false) {
                    this.openPortal();
                }
            }
        }
    }, {
        key: 'handleWrapperHoverOut',
        value: function handleWrapperHoverOut(e) {
            var onMouseOut = this.props.onMouseOut;

            if (onMouseOut) {
                onMouseOut(this.closePortal.bind(this));
            } else {
                this.closePortal();
            }
        }
    }, {
        key: 'openPortal',
        value: function openPortal() {
            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

            this.setState({ active: true });
            this.renderPortal(props);
            this.props.onOpen(this.node);
        }
    }, {
        key: 'closePortal',
        value: function closePortal() {
            var _this2 = this;

            // console.log('close')
            var resetPortalState = function resetPortalState() {
                if (_this2.node) {
                    _reactDom2.default.unmountComponentAtNode(_this2.node);
                    document.body.removeChild(_this2.node);
                }
                _this2.portal = null;
                _this2.node = null;
                if (_this2.mounted) {
                    _this2.setState({ active: false });
                }
            };

            if (this.state.active) {
                if (this.props.beforeClose) {
                    this.props.beforeClose(this.node, resetPortalState);
                } else {
                    resetPortalState();
                }
                this.props.onClose();
            }
        }
    }, {
        key: 'handleOutsideMouseClick',
        value: function handleOutsideMouseClick(e) {
            if (!this.state.active) {
                return;
            }

            var root = (0, _reactDom.findDOMNode)(this.portal);
            if (root.contains(e.target) || e.button && e.button !== 0) {
                return;
            }

            e.stopPropagation();
            this.closePortal();
        }
    }, {
        key: 'handleKeydown',
        value: function handleKeydown(e) {
            if (e.keyCode === KEYCODES.ESCAPE && this.state.active) {
                this.closePortal();
            }
        }
    }, {
        key: 'renderPortal',
        value: function renderPortal(props) {
            if (!this.node) {
                this.node = document.createElement('div');
                this.node.className = props.className || '';
                document.body.appendChild(this.node);
            }

            var children = props.children;

            if (typeof props.children.type === 'function') {
                children = _react2.default.cloneElement(props.children, { closePortal: this.closePortal });
            }

            this.portal = _reactDom2.default.unstable_renderSubtreeIntoContainer(this, children, this.node, this.props.onUpdate);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            if (this.props.openByClickOn) {
                var onClick = this.props.openByClickOn.props.onClick;
                if (!onClick) {
                    onClick = function onClick() {};
                }
                var newOnClick = function newOnClick(e) {
                    onClick(e);
                    _this3.handleWrapperClick(e);
                };
                return _react2.default.cloneElement(this.props.openByClickOn, { onClick: newOnClick });
            }
            if (this.props.openByHoverOn) {
                return _react2.default.cloneElement(this.props.openByHoverOn, { onMouseOver: this.handleWrapperHover, onMouseOut: this.handleWrapperHoverOut });
            }
            return null;
        }
    }]);
    return Portal;
}(_react2.default.Component);

exports.default = Portal;


Portal.propTypes = {
    children: _propTypes2.default.element.isRequired,
    openByClickOn: _propTypes2.default.element,
    // <--这三个是用来做onHover触发的效果,
    openByHoverOn: _propTypes2.default.element,
    // 提供open方法
    onMouseOver: _propTypes2.default.func,
    // 提供close方法
    onMouseOut: _propTypes2.default.func,
    // --->
    closeOnEsc: _propTypes2.default.bool,
    closeOnOutsideClick: _propTypes2.default.bool,
    isOpened: _propTypes2.default.bool,
    onOpen: _propTypes2.default.func,
    onClose: _propTypes2.default.func,
    beforeClose: _propTypes2.default.func,
    className: _propTypes2.default.string,
    onUpdate: _propTypes2.default.func
};

Portal.defaultProps = {
    onOpen: function onOpen() {},
    onClose: function onClose() {},
    onUpdate: function onUpdate() {}
};
module.exports = exports['default'];