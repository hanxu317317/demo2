'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * resize table 分两种使用情况，这里拿具体的业务来说
 * 1.审批流：收尾没有需要固定的单元格，这时候使用简单，直接拿去用
 * 2.标准对象列表页：首部有两个固定的单元格，尾部有一个固定的单元格
 * 这种情况使用的时候必须要三个 props：wrapWidth，fixedWidth，columnSize
 * wrapWidth：整个外层的宽度，根据实际使用情况来定，记住 tr 的宽度只有第一次才会给，所以当这种使用情况的时候你需要先知道你的容器有多宽，至于怎么知道，本组件不关心
 * fixedWidth： 若干固定宽度的单元的总宽度
 * columnSize： 除了固定宽度的单元格以为的总个数
 * 此拖拽实现还有待优化，参考 salesforce 的做法，目前先这样解决，老板需要开始卖产品了，目前的实现方式只是对开发来说不是那么的友好
 */

var TableResize = function (_React$Component) {
    (0, _inherits3.default)(TableResize, _React$Component);

    function TableResize(props) {
        (0, _classCallCheck3.default)(this, TableResize);

        var _this = (0, _possibleConstructorReturn3.default)(this, (TableResize.__proto__ || (0, _getPrototypeOf2.default)(TableResize)).call(this, props));

        _this.state = {
            active: false, // 是否显示标示线
            resizing: false // table是否可调整列宽
        };
        _this.resizeData = {
            tdWidth: 0, // 当前td在调整前的宽度
            isMousedown: false, // 标识鼠标是否为按下状态
            startX: 0, // 点击时记录的开始位置
            targetId: null, // 当前在调整列宽的td
            tableWidth: 0 // 拖动前整个table 宽度
        };
        _this._changeTransform = _this._changeTransform.bind(_this);
        _this.onmousedown = _this.onmousedown.bind(_this);
        _this.onmouseup = _this.onmouseup.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(TableResize, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var dividerBefore = this.refs.divider;
            dividerBefore.style.height = this.refs.table.offsetHeight - 30 + 'px';

            var elem = this.refs.loadData;

            elem.addEventListener('scroll', _lodash2.default.throttle(function () {
                _this2._changeTransform(_this2.refs.thead_tr.children, elem);
            }));
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var elem = this.refs.loadData;
            elem.removeEventListener('scroll', _lodash2.default.throttle);
        }
    }, {
        key: '_changeTransform',
        value: function _changeTransform(children, elem) {
            _lodash2.default.map(children, function (v) {
                v.children[0].style.transform = 'translate3d(' + -elem.scrollLeft + 'px, 0px, 0px)';
            });
        }
    }, {
        key: 'onmousedown',
        value: function onmousedown(event) {
            var scroller = this.refs.loadData;

            // 外层的位置
            var position = scroller.getBoundingClientRect();

            // resize 出现的位置和起始位置
            var startX = event.clientX - position.left;
            this.resizeData = (0, _assign2.default)(this.resizeData, {
                isMousedown: true,
                // 存储 down 的时候 td 的 width
                tdWidth: event.target.parentElement.parentElement.offsetWidth,
                startX: startX,
                targetId: event.target.parentElement,
                tableWidth: this.refs.table.offsetWidth
            });

            this.setState({
                active: true,
                resizing: true
            });

            scroller.style.overflow = 'hidden';
            var divider = this.refs.resizable_divider;
            divider.style.transform = 'translate3d(' + startX + 'px, 0px, 0px)';
        }
    }, {
        key: 'onmouseup',
        value: function onmouseup(event) {
            var _this3 = this;

            // 还原 scroll 样式
            var scroller = this.refs.loadData;
            scroller.style.overflow = 'auto';

            // 计算移动的距离,当前指针相对于浏览器左边的宽度 - scroller 相对于左边的宽度 - 初始值，结果有可能是正的，也有可能是负的
            var position = scroller.getBoundingClientRect();
            var deltaX = event.clientX - position.left - this.resizeData.startX;

            this.resizeData = (0, _assign2.default)(this.resizeData, {
                isMousedown: false
            });

            this.setState({
                active: false,
                resizing: false
            }, function () {

                // 还原 divider 位置
                var divider = _this3.refs.resizable_divider;
                divider.style.transform = 'translate3d(0px, 0px, 0px)';

                // 修改当前拖动元素的位置
                var targetId = _this3.resizeData.targetId;
                // 保持最小宽度 50
                var curWidth = _this3.resizeData.tdWidth + deltaX;
                if (curWidth < 50) {
                    deltaX = deltaX + (50 - curWidth);
                    curWidth = 50;
                }

                targetId.style.width = curWidth + 'px';
                targetId.parentElement.style.width = curWidth + 'px';

                // 重新设置新的 table 的宽度
                var table = _this3.refs.table;
                table.style.width = _this3.resizeData.tableWidth + deltaX + 'px';
            });
        }
    }, {
        key: 'onmousemove',
        value: function onmousemove(event) {
            if (this.resizeData.isMousedown) {
                // 外层的位置
                var position = this.refs.loadData.getBoundingClientRect();

                var divider = this.refs.resizable_divider;
                divider.style.transform = 'translate3d(' + (event.clientX - position.left) + 'px, 0px, 0px)';
            }
        }
    }, {
        key: '_renderTh',
        value: function _renderTh(childrenTh) {
            var _this4 = this;

            var resizeNum = 0;
            _react2.default.Children.toArray(childrenTh).forEach(function (v) {
                if (v.props.resizable) {
                    resizeNum++;
                }
            });

            var columnWidth = 0;
            // 列数量和固定的宽度确定的时候才是需要初始化给平均分配宽度的情况
            if (this.props.columnSize && this.props.fixedWidth && this.props.wrapWidth) {
                // 每一列的宽度 = 外层宽度 - 固定位置的宽度 / resize 的 column 的总数
                // console.log(this.props.wrapWidth, this.props.fixedWidth, this.props.columnSize)
                columnWidth = ((this.props.wrapWidth - this.props.fixedWidth) / this.props.columnSize).toFixed(2);
                // 每一列最小宽度 100
                columnWidth = Math.max(columnWidth, 100);
                // console.log('columnWidth:', columnWidth);
            }

            return _react2.default.Children.toArray(childrenTh).map(function (v) {
                if (v.props.resizable) {
                    return _react2.default.cloneElement(v, {
                        'data-columnWidth': columnWidth,
                        onMouseDown: _this4.onmousedown,
                        onMouseUp: _this4.onmouseup
                    });
                }
                return v;
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this5 = this;

            return _react2.default.createElement(
                'div',
                { className: 'mcds-table__resize' },
                _react2.default.createElement(
                    'div',
                    { className: 'mcds-table__resize-container' },
                    _react2.default.createElement(
                        'div',
                        { className: 'mcds-table__resize-display' },
                        _react2.default.createElement(
                            'div',
                            { ref: 'loadData', className: 'mcds-table__resize-scroller' },
                            _react2.default.createElement(
                                'div',
                                { ref: 'resizable_divider', className: (0, _classnames2.default)('mcds-indicator', { 'mcds-indicator__active': this.state.active }), onMouseUp: this.onmouseup.bind(this) },
                                _react2.default.createElement('span', { ref: 'divider', className: 'mcds-resizable__divider' })
                            ),
                            _react2.default.createElement(
                                'table',
                                { ref: 'table', className: (0, _classnames2.default)('mcds-table mcds-table__bordered', { resizing: this.state.resizing }, this.props.className) },
                                _react2.default.Children.map(this.props.children, function (v) {
                                    if (v && v.type === 'thead') {
                                        return _react2.default.createElement(
                                            'thead',
                                            { onMouseMove: _this5.onmousemove.bind(_this5) },
                                            _react2.default.createElement(
                                                'tr',
                                                { ref: 'thead_tr' },
                                                _this5._renderTh(v.props.children.props.children)
                                            )
                                        );
                                    }
                                    return v;
                                })
                            )
                        )
                    )
                )
            );
        }
    }]);
    return TableResize;
}(_react2.default.Component);

TableResize.propTypes = {
    className: _propTypes2.default.string,
    wrapWidth: _propTypes2.default.number, // 列表总宽度
    fixedWidth: _propTypes2.default.number, // 首尾固定的单元格宽度
    columnSize: _propTypes2.default.number, // 总共的需要支持 resize 的列数
    children: _propTypes2.default.any
};

TableResize.defaultProps = {
    fixedWidth: 0
};

exports.default = {
    TableResize: TableResize
};
module.exports = exports['default'];