'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getDecorator = exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _draftJs = require('draft-js');

var _components = require('../../components');

var _buttons = require('../buttons');

var _panel = require('./panel');

var _panel2 = _interopRequireDefault(_panel);

var _decorator = require('./decorator');

var _decorator2 = _interopRequireDefault(_decorator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Link = function (_Component) {
    (0, _inherits3.default)(Link, _Component);

    function Link() {
        (0, _classCallCheck3.default)(this, Link);
        return (0, _possibleConstructorReturn3.default)(this, (Link.__proto__ || (0, _getPrototypeOf2.default)(Link)).apply(this, arguments));
    }

    (0, _createClass3.default)(Link, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var url = getUrlFromEditorState(nextProps.editorState);
            var orgUrl = getUrlFromEditorState(this.props.editorState);
            if (orgUrl !== url) {
                this.refs.panel.setUrl(url);
            }
        }
    }, {
        key: 'handleChange',
        value: function handleChange(url) {
            this.refs.pop.hide();
            var editorState = this.props.editorState;

            if (url === getUrlFromEditorState(editorState)) {
                return;
            }
            var entityKey = null;
            if (url) {
                entityKey = _draftJs.Entity.create('LINK', 'MUTABLE', { url: url });
            }
            this.props.onChange(_draftJs.RichUtils.toggleLink(editorState, editorState.getSelection(), entityKey));
        }
    }, {
        key: 'handleShow',
        value: function handleShow() {
            if (this.refs.panel) {
                this.refs.panel.focus();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var editorState = this.props.editorState;

            var url = getUrlFromEditorState(editorState);
            return _react2.default.createElement(
                _components.Popover,
                {
                    ref: 'pop',
                    placement: 'bottom',
                    onShow: this.handleShow.bind(this),
                    content: _react2.default.createElement(_panel2.default, {
                        ref: 'panel',
                        url: url,
                        onChange: this.handleChange.bind(this) }) },
                _react2.default.createElement(_buttons.LinkButton, null)
            );
        }
    }]);
    return Link;
}(_react.Component);

exports.default = Link;


Link.propTypes = {
    editorState: _propTypes2.default.object.isRequired,
    onChange: _propTypes2.default.func.isRequired
};

var hasLink = function hasLink(editorState) {
    return _draftJs.RichUtils.currentBlockContainsLink(editorState);
};

/**
 * 获取选中文本中的 url
 */
var getUrlFromEditorState = function getUrlFromEditorState(editorState) {
    if (!hasLink(editorState)) {
        return '';
    }
    var startKey = editorState.getSelection().getAnchorKey();
    var offset = editorState.getSelection().getStartOffset();
    var linkKey = editorState.getCurrentContent().getBlockForKey(startKey).getEntityAt(offset);
    if (!linkKey) {
        return '';
    }
    var linkInstance = _draftJs.Entity.get(linkKey);
    return linkInstance.getData().url || '';
};

exports.getDecorator = _decorator2.default;