'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.COLOR_MAP = exports.default = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _draftJs = require('draft-js');

var _components = require('../../components');

var _buttons = require('../buttons');

var _panel = require('./panel');

var _panel2 = _interopRequireDefault(_panel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import colorPicker from './../../../../../../color-picker/index';

var Color = function (_Component) {
    (0, _inherits3.default)(Color, _Component);

    function Color() {
        (0, _classCallCheck3.default)(this, Color);
        return (0, _possibleConstructorReturn3.default)(this, (Color.__proto__ || (0, _getPrototypeOf2.default)(Color)).apply(this, arguments));
    }

    (0, _createClass3.default)(Color, [{
        key: 'handleClick',
        value: function handleClick(colorKey) {
            this.refs.popover.hide();
            var newEditorState = changeColor(this.props.editorState, colorKey);
            this.props.onChange(newEditorState);
        }
    }, {
        key: 'handleChangeCurrentColor',
        value: function handleChangeCurrentColor() {
            var editorState = this.props.editorState;

            var currentColor = editorState.getCurrentInlineStyle().toJS().filter(function (x) {
                return x && x.startsWith('C');
            })[0];
            this.refs.panel.setCurrentColor(currentColor);
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _components.Popover,
                {
                    ref: 'popover',
                    placement: 'bottom',
                    content: _react2.default.createElement(_panel2.default, { ref: 'panel', onClick: this.handleClick.bind(this) }) },
                _react2.default.createElement(_buttons.ColorButton, { onClick: this.handleChangeCurrentColor.bind(this) })
            );
        }
    }]);
    return Color;
}(_react.Component);

exports.default = Color;


Color.propTypes = {
    editorState: _propTypes2.default.object,
    onChange: _propTypes2.default.func
};

var COLOR_MAP = {
    C_1: {
        color: 'rgb(87, 166, 255)'
    },
    C_2: {
        color: 'rgb(12, 209, 133)'
    },
    C_3: {
        color: 'rgb(119, 211, 83)'
    },
    C_4: {
        color: 'rgb(255, 186, 92)'
    },
    C_5: {
        color: 'rgb(184, 151, 126)'
    },
    C_6: {
        color: 'rgb(255, 144, 82)'
    },
    C_7: {
        color: 'rgb(249, 95, 98)'
    },
    C_8: {
        color: 'rgb(247, 127, 179)'
    },
    C_9: {
        color: 'rgb(151, 109, 208)'
    },
    C_10: {
        color: 'rgb(52, 63, 75)'
    },
    C_11: {
        color: 'rgb(90, 105, 120)'
    },
    C_12: {
        color: 'rgb(150, 159, 170)'
    },
    C_13: {
        color: 'rgb(198, 203, 208)'
    },
    C_14: {
        color: 'rgb(255, 255, 255)'
    }
};

var changeColor = function changeColor(editorState, color) {
    var selection = editorState.getSelection();
    var nextContentState = (0, _keys2.default)(COLOR_MAP).reduce(function (contentState, key) {
        return _draftJs.Modifier.removeInlineStyle(contentState, selection, key);
    }, editorState.getCurrentContent());
    var nextEditorState = _draftJs.EditorState.push(editorState, nextContentState, 'change-inline-style');

    var currentStyle = editorState.getCurrentInlineStyle();

    if (selection.isCollapsed()) {
        nextEditorState = currentStyle.reduce(function (state, key) {
            return _draftJs.RichUtils.toggleInlineStyle(state, key);
        }, nextEditorState);
    }

    if (!currentStyle.has(color)) {
        nextEditorState = _draftJs.RichUtils.toggleInlineStyle(nextEditorState, color);
    }
    return nextEditorState;
};

// const getColorKey = (maps, value) => {
//     const key = Object.keys(maps).find(k => maps[k].color === `rgb(${value})`);
//     return key;
// };

exports.COLOR_MAP = COLOR_MAP;