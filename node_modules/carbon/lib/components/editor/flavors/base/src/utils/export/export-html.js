'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _draftJs = require('draft-js');

var _getEntityRanges = require('./get-entity-ranges');

var _getEntityRanges2 = _interopRequireDefault(_getEntityRanges);

var _fontSize = require('../../plugins/font-size');

var _color = require('../../plugins/color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var exportToHTML = function exportToHTML(contentState) {
    var output = [];
    var blocks = contentState.getBlocksAsArray();
    var inBlockList = false;
    for (var i = 0, length = blocks.length; i < length; i++) {
        var prevBlockType = blocks[i - 1] && blocks[i - 1].getType();
        var nextBlockType = blocks[i + 1] && blocks[i + 1].getType();
        var block = blocks[i];
        var type = block.getType();
        if (['ordered-list-item', 'unordered-list-item'].indexOf(type) !== -1) {
            if (!inBlockList && prevBlockType !== type) {
                output = output.concat(getWrapperTagBegin(type));
                inBlockList = true;
            }
            output = output.concat(processBlock(block, 'list-item'));
            if (inBlockList && type !== nextBlockType) {
                output = output.concat(getWrapperTagEnd(type));
                inBlockList = false;
            }
        } else {
            output = output.concat(processBlock(block));
        }
    }
    return output.join('');
};

exports.default = exportToHTML;


var processBlock = function processBlock(block, type) {
    var aType = type || block.getType();
    var output = [];
    var content = getContent(block);
    var tagBegin = getWrapperTagBegin(aType);
    // if (!content.length && tagBegin === '<div>') {
    //     tagBegin = '<div data-role="new-line">';
    // }
    // 暂时通过设定div最小高度来控制空行
    output.push(tagBegin);
    output.push(content);
    output.push(getWrapperTagEnd(aType));
    return output;
};

var getContent = function getContent(block) {
    var text = block.getText();
    if (text === '') {
        return '';
    }
    var charMetaList = block.getCharacterList();
    var entityPieces = (0, _getEntityRanges2.default)(text, charMetaList);
    return entityPieces.map(function (_ref) {
        var _ref2 = (0, _slicedToArray3.default)(_ref, 2),
            entityKey = _ref2[0],
            stylePieces = _ref2[1];

        var newContent = stylePieces.map(function (_ref3) {
            var _ref4 = (0, _slicedToArray3.default)(_ref3, 2),
                t = _ref4[0],
                style = _ref4[1];

            var content = encodeContent(t);
            if (style.has('BOLD')) {
                content = '<strong>' + content + '</strong>';
            }
            if (style.has('ITALIC')) {
                content = '<em>' + content + '</em>';
            }
            if (style.has('UNDERLINE')) {
                content = '<u>' + content + '</u>';
            }
            var otherInlineStyles = style.filter(function (x) {
                return x.startsWith('F_') || x.startsWith('C_');
            });
            if (otherInlineStyles.size > 0) {
                var attrs = [];
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = (0, _getIterator3.default)(otherInlineStyles), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var inlineStyle = _step.value;

                        if (inlineStyle.startsWith('F_')) {
                            attrs.push('font-size: ' + _fontSize.FONT_SIZE_MAP[inlineStyle].fontSize);
                        } else if (inlineStyle.startsWith('C_')) {
                            attrs.push('color: ' + _color.COLOR_MAP[inlineStyle].color);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                content = '<span style="' + attrs.join(';') + '">' + content + '</span>';
            }
            return content;
        }).join('');
        var entity = entityKey ? _draftJs.Entity.get(entityKey) : null;
        var entityType = entity === null ? null : entity.getType();
        if (entityType !== null && entityType === 'LINK') {
            var url = entity.get('data').url;
            newContent = '<a target="_blank" href="' + encodeAttr(url) + '">' + newContent + '</a>';
        }
        if (entityType !== null && entityType === 'IMAGE') {
            var src = entity.get('data').src;
            newContent = '<img style="max-width: 100%" src="' + encodeAttr(src) + '" />';
        }
        return newContent;
    }).join('');
};

var getWrapperTagBegin = function getWrapperTagBegin(blockType) {
    return wrapStyleIfNeed(_getWrapperTag(blockType));
};

var getWrapperTagEnd = function getWrapperTagEnd(blockType) {
    return '</' + _getWrapperTag(blockType) + '>';
};

var _getWrapperTag = function _getWrapperTag(blockType) {
    return blockTypeMap[blockType] || 'div';
};

var blockTypeMap = {
    'ordered-list-item': 'ol',
    'unordered-list-item': 'ul',
    'list-item': 'li',
    'header-four': 'h4',
    'header-five': 'h5',
    'header-six': 'h6'
};

var encodeContent = function encodeContent(text) {
    return text.split('&').join('&amp;').split('<').join('&lt;').split('>').join('&gt').split(' ').join('&nbsp;').split('\xA0').join('&nbsp;').split('\n').join('<br /> \n');
};

var encodeAttr = function encodeAttr(text) {
    return text.split('&').join('&amp;').split('<').join('&lt').split('>').join('&gt').split('"').join('&quot;');
};

var wrapStyleIfNeed = function wrapStyleIfNeed(tag) {
    if (['h4', 'h5', 'h6'].indexOf(tag) !== -1) {
        return '<' + tag + ' style="font-size: 14px;font-weight: normal;margin: 0;padding: 0;text-align: ' + alignMap[tag] + '">';
    }
    return '<' + tag + '>';
};

var alignMap = {
    h4: 'left',
    h5: 'center',
    h6: 'right'
};
module.exports = exports['default'];