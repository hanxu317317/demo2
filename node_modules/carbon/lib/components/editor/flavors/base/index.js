'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _draftJs = require('draft-js');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _inlines = require('./src/plugins/inlines');

var _blocks = require('./src/plugins/blocks');

var _color = require('./src/plugins/color');

var _color2 = _interopRequireDefault(_color);

var _fontSize = require('./src/plugins/font-size');

var _fontSize2 = _interopRequireDefault(_fontSize);

var _link = require('./src/plugins/link');

var _link2 = _interopRequireDefault(_link);

var _image = require('./src/plugins/image');

var _image2 = _interopRequireDefault(_image);

var _components = require('./src/components');

var _blockStyle = require('./src/utils/block-style');

var _blockStyle2 = _interopRequireDefault(_blockStyle);

var _utils = require('./src/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var customStyleMap = (0, _assign2.default)({}, _fontSize.FONT_SIZE_MAP, _color.COLOR_MAP);
// import './editor.css';


// import ReactDOM from 'react-dom';

var decorator = new _draftJs.CompositeDecorator([(0, _link.getDecorator)()]);

var Editor = function (_React$Component) {
    (0, _inherits3.default)(Editor, _React$Component);

    function Editor(props) {
        (0, _classCallCheck3.default)(this, Editor);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Editor.__proto__ || (0, _getPrototypeOf2.default)(Editor)).call(this, props));

        var editorState = void 0;
        if (props.defaultValue) {
            var newBlocks = (0, _utils.importFromHTML)(props.defaultValue);
            var newContent = _draftJs.ContentState.createFromBlockArray(newBlocks);
            editorState = _draftJs.EditorState.createWithContent(newContent, decorator);
        } else {
            editorState = _draftJs.EditorState.createEmpty(decorator);
        }
        _this.state = {
            editorState: editorState,
            uploading: false,
            uploadProgress: 0,
            onfocus: false
        };
        return _this;
    }

    (0, _createClass3.default)(Editor, [{
        key: 'onChange',
        value: function onChange(editorState) {
            var _this2 = this;

            this.setState({ editorState: editorState }, function () {
                return _this2.props.onChange && _this2.props.onChange(_this2.exportToHTML());
            });
        }
    }, {
        key: 'changeDefaultValue',
        value: function changeDefaultValue(value) {
            var editorState = void 0;
            var newBlocks = (0, _utils.importFromHTML)(value || '<div></div>');
            var newContent = _draftJs.ContentState.createFromBlockArray(newBlocks);
            editorState = _draftJs.EditorState.createWithContent(newContent, decorator);
            this.onChange(editorState);
        }
    }, {
        key: 'exportToHTML',
        value: function exportToHTML() {
            var content = this.state.editorState.getCurrentContent();
            return (0, _utils.exportToHTML)(content);
        }
    }, {
        key: 'importHtml',
        value: function importHtml(html) {
            var newBlocks = (0, _utils.importFromHTML)(html);
            var newContent = _draftJs.ContentState.createFromBlockArray(newBlocks);
            var editorState = _draftJs.EditorState.createWithContent(newContent, decorator);

            this.setState({ editorState: editorState });
        }
    }, {
        key: 'change',
        value: function change(nextEditorState) {
            this.onChange(nextEditorState);
            this.focus();
        }
    }, {
        key: 'uploadImage',
        value: function uploadImage(imageFile) {
            var _this3 = this;

            var _props = this.props,
                onError = _props.onError,
                onUpload = _props.onUpload,
                uploadMaxSize = _props.uploadMaxSize;

            if (imageFile.size > uploadMaxSize) {
                onError('\u4E0A\u4F20\u56FE\u7247\u4E0D\u80FD\u8D85\u8FC7 ' + (0, _utils.displaySize)(uploadMaxSize));
                return new _promise2.default(function (resolve) {
                    return resolve();
                });
            }
            this.setState({ uploading: true });
            return onUpload(imageFile).then(function (src) {
                return _this3.setState({ uploading: false }), src;
            });
        }
    }, {
        key: 'setUploadProgress',
        value: function setUploadProgress(progress) {
            this.setState({ uploadProgress: progress.percent });
        }
    }, {
        key: 'focus',
        value: function focus() {
            // this.setState({onfocus: true});
            dely(this.refs.editor.focus);
        }
    }, {
        key: 'handleKeyCommand',
        value: function handleKeyCommand(command) {
            var editorState = this.state.editorState;

            var newState = _draftJs.RichUtils.handleKeyCommand(editorState, command);
            if (newState) {
                this.onChange(newState);
                return true;
            }
            return false;
        }
        // handleOnBlur() {
        //     this.setState({onfocus:false})
        // }
        // componentDidMount() {
        //     window.addEventListener('keyup', this._handleKeyUp);
        // }
        // componentWillUnmount() {
        //     window.removeEventListener('keyup', this._handleKeyUp);
        // }
        // _handleSelect = e => {
        //     const show  = this.state.show;
        //     if (!show) {
        //         return;
        //     }
        //     const active = this.state.active;
        //     if (e.which === 38 || e.which === 9) {
        //         if (active === 0) {
        //             this.setState({active: this.items.length - 1});
        //         } else {
        //             this.setState({active: active - 1});
        //         }
        //     }
        //     if (e.which === 40) {
        //         if (active >= this.items.length - 1) {
        //             this.setState({active: 0});
        //         } else {
        //             this.setState({active: active + 1});
        //         }
        //     }
        //     if (e.which === 27 && show) {
        //         this.setState({show: false});
        //     }
        //     if (e.which === 13 && show) {
        //         const reply = this.items[active];
        //         this.runWithType(reply);
        //         e.stopPropagation();
        //         e.preventDefault();
        //     }
        // }
        // _handleKeyUp = e => {
        //     const code = e.which;
        //     if ([38, 9, 40, 13, 27].indexOf(code) !== -1) {
        //         this._handleSelect(e);
        //         return;
        //     }
        //     let value = this.refs.editor.exportToHTML();
        //     console.log('value')
        //     let index = value.lastIndexOf('@');
        //     if (index !== -1) {
        //         const query = this.query = value.slice(index + 1);
        //         if (!query) {
        //             this.setState({show: false});
        //             return;
        //         }
        //         const replies = props.replies.toJS();
        //         const groups = replies.reduce((c, r) => {
        //             if (~r.title.toLowerCase().indexOf(query.toLowerCase())) {
        //                 c.title.push(r);
        //             } else if (~r.content.toLowerCase().indexOf(query.toLowerCase())) {
        //                 c.content.push(r);
        //             }
        //             return c;
        //         }, {title: [], content: []});
        //         const items = this.items = groups.title.concat(groups.content);
        //         this.setState({show: items.length > 0, active: 0});
        //     }
        // }
        // _handleSelected(content) {
        //     const query = this.query;
        //     if (query) {
        //         const editor = this.refs.wraped.getWraped();
        //         const value = editor.getValue();
        //         const reg = new RegExp(`@ *${query}\n?`);
        //         const result = value.replace(reg, '');
        //         editor.setValue(result + (result === '' ? '' : ' ') + content);
        //         let isFocus = editor.isFocus();
        //         if (!isFocus) {
        //             editor.focus();
        //         };
        //     }
        // }
        // _handleKeyDown(e) {
        //     if (e.which === 13 && this.state.show) {
        //         e.stopPropagation();
        //         e.preventDefault();
        //     } else {
        //         this.props.onKeyDown && this.props.onKeyDown(e);
        //     }
        // }

    }, {
        key: 'render',
        value: function render() {
            var _state = this.state,
                editorState = _state.editorState,
                uploading = _state.uploading,
                uploadProgress = _state.uploadProgress,
                onfocus = _state.onfocus;
            var _props2 = this.props,
                miniStyle = _props2.miniStyle,
                fontSizeStyle = _props2.fontSizeStyle,
                error = _props2.error;

            return _react2.default.createElement(
                'div',
                { className: (0, _classnames2.default)('mcds-editor__wrap', { 'mcds-editor__wrap-focus': onfocus }) },
                _react2.default.createElement(
                    'div',
                    { ref: 'toolbar', className: miniStyle ? 'mcds-editor__toolbar-mini' : 'mcds-editor__toolbar' },
                    fontSizeStyle ? _react2.default.createElement(_fontSize2.default, { editorState: editorState, onChange: this.change.bind(this) }) : null,
                    _react2.default.createElement(_inlines.BoldComponent, { editorState: editorState, onChange: this.change.bind(this) }),
                    _react2.default.createElement(_inlines.ItalicComponent, { editorState: editorState, onChange: this.change.bind(this) }),
                    _react2.default.createElement(_inlines.UnderlineComponent, { editorState: editorState, onChange: this.change.bind(this) }),
                    _react2.default.createElement(_color2.default, { editorState: editorState, onChange: this.change.bind(this) }),
                    miniStyle ? null : _react2.default.createElement(_components.Separator, null),
                    _react2.default.createElement(_blocks.AlignLeftComponent, { editorState: editorState, onChange: this.change.bind(this) }),
                    _react2.default.createElement(_blocks.AlignCenterComponent, { editorState: editorState, onChange: this.change.bind(this) }),
                    _react2.default.createElement(_blocks.AlignRightComponent, { editorState: editorState, onChange: this.change.bind(this) }),
                    miniStyle ? null : _react2.default.createElement(_components.Separator, null),
                    _react2.default.createElement(_blocks.OrderedListComponent, { editorState: editorState, onChange: this.change.bind(this) }),
                    _react2.default.createElement(_blocks.UnorderedListComponent, { editorState: editorState, onChange: this.change.bind(this) }),
                    miniStyle ? null : _react2.default.createElement(_components.Separator, null),
                    _react2.default.createElement(_link2.default, { editorState: editorState, onChange: this.change.bind(this) }),
                    _react2.default.createElement(_image2.default, { onUpload: this.uploadImage.bind(this), editorState: editorState, onChange: this.change.bind(this) })
                ),
                _react2.default.createElement(
                    'div',
                    { className: (0, _classnames2.default)('mcds-editor__root', { 'mcds-element__border': error }), onClick: this.focus.bind(this) },
                    _react2.default.createElement(_draftJs.Editor, {
                        ref: 'editor',
                        customStyleMap: customStyleMap,
                        editorState: editorState,
                        onChange: this.onChange.bind(this),
                        blockStyleFn: _blockStyle2.default,
                        handleKeyCommand: this.handleKeyCommand.bind(this),
                        blockRendererFn: _image.mediaBlockRenderer })
                ),
                uploading ? _react2.default.createElement(_image.Loading, { progress: uploadProgress }) : ''
            );
        }
    }]);
    return Editor;
}(_react2.default.Component);

Editor.defaultProps = {
    fontSizeStyle: true
};
exports.default = Editor;


Editor.propTypes = {
    defaultValue: _propTypes2.default.string,
    onUpload: _propTypes2.default.func,
    onChange: _propTypes2.default.func,
    onError: _propTypes2.default.func,
    uploadMaxSize: _propTypes2.default.number,
    miniStyle: _propTypes2.default.bool,
    fontSizeStyle: _propTypes2.default.bool,
    error: _propTypes2.default.bool
};

var dely = function dely(fn) {
    var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return window.setTimeout(fn, time);
};
module.exports = exports['default'];