'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _index = require('./flavors/base/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import MyAjax from 'utils/my-ajax';
// import { notify } from 'components_new/setting/self-service/utils';

// 这个样式文件能够定义 编辑器的某些默认样式。
// import './index.css';
var maxSize = 5 * 1000 * 1000;
var EMPTY = '<div></div>';

var MyEditor = function (_Component) {
    (0, _inherits3.default)(MyEditor, _Component);

    function MyEditor() {
        (0, _classCallCheck3.default)(this, MyEditor);

        var _this = (0, _possibleConstructorReturn3.default)(this, (MyEditor.__proto__ || (0, _getPrototypeOf2.default)(MyEditor)).call(this));

        _this.getValue = _this.getValue.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(MyEditor, [{
        key: 'handleError',
        value: function handleError(msg) {
            // notify.custom(msg, 'error');
            console.log(msg, 'error');
        }
        /**
         * [handleUpload description]
         * @param  {[type]} file [参数文件]
         * @return {[type]}      [description]
         */

    }, {
        key: 'handleUpload',
        value: function handleUpload() {
            // return new Promise(resolve => {
            //     MyAjax.uploadImage({
            //         url: '/upload',
            //         file: file,
            //         error: () => {
            //             resolve();
            //         },
            //         success: response => {
            //             resolve(response.photo_url);
            //         },
            //         progress: progress => {
            //             this.refs.editor.setUploadProgress(progress);
            //         }
            //     });
            // });
            console.log('success');
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            return this.refs.editor.getValue();
        }
    }, {
        key: 'focus',
        value: function focus() {
            if (this.refs.editor) {
                this.refs.editor.focus();
            }
        }
    }, {
        key: 'html',
        value: function html(value) {
            if (value === undefined) {
                return this.exportToHTML();
            }
            this.refs.editor.changeDefaultValue(arguments[0]);
            return this;
        }
    }, {
        key: 'isEmpty',
        value: function isEmpty() {
            return this.html() === EMPTY;
        }
    }, {
        key: 'empty',
        value: function empty() {
            this.html(EMPTY);
        }
    }, {
        key: 'contentEmpty',
        value: function contentEmpty() {
            var cleanText = this.html().replace(/<\/?[^>]+(>|$)/g, '');
            cleanText = cleanText.replace(/(\s|&nbsp;|\u00a0)/g, '');
            return cleanText.length === 0;
        }
    }, {
        key: 'exportToHTML',
        value: function exportToHTML() {
            return this.refs.editor.exportToHTML();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                defaultValue = _props.defaultValue,
                onChange = _props.onChange,
                _props$miniStyle = _props.miniStyle,
                miniStyle = _props$miniStyle === undefined ? false : _props$miniStyle;

            return _react2.default.createElement(_index2.default, {
                error: true,
                ref: 'editor',
                defaultValue: defaultValue,
                miniStyle: miniStyle,
                uploadMaxSize: maxSize,
                onUpload: this.handleUpload.bind(this),
                onChange: onChange,
                onError: this.handleError.bind(this) });
        }
    }]);
    return MyEditor;
}(_react.Component);

MyEditor.propTypes = {
    miniStyle: _propTypes2.default.bool,
    defaultValue: _propTypes2.default.string,
    onChange: _propTypes2.default.func
};

exports.default = {
    Editor: MyEditor
};
module.exports = exports['default'];