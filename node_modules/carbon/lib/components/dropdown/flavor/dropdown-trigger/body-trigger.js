'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _portal = require('../../../../base-components/portal');

var _portal2 = _interopRequireDefault(_portal);

var _util = require('./util');

var _dom = require('../../../../utils/dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 定义位置

var Direction = ['left', 'right', 'bottom', 'top', 'top-left', 'top-right', 'right-top', 'right-bottom', 'bottom-left', 'bottom-right', 'left-top', 'left-bottom'];
/*
     通过getBoundingClientRect得到的数据计算四个点的坐标
     x1,y1        x2,y2
     x4,y4        x3,y3
 */
var getCoordinates = function getCoordinates(visualPos) {
    // 四个顶点的坐标
    var result = {
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0,
        x3: 0,
        y3: 0,
        x4: 0,
        y4: 0
    };
    result.x1 = visualPos.left;
    result.y1 = visualPos.top;

    result.x2 = visualPos.left + visualPos.width;
    result.y2 = visualPos.top;

    result.x3 = visualPos.left + visualPos.width;
    result.y3 = visualPos.top + visualPos.height;

    result.x4 = visualPos.left;
    result.y4 = visualPos.top + visualPos.height;
    return result;
};

var PortalDropDownTrigger = function (_React$Component) {
    (0, _inherits3.default)(PortalDropDownTrigger, _React$Component);

    function PortalDropDownTrigger() {
        (0, _classCallCheck3.default)(this, PortalDropDownTrigger);

        var _this = (0, _possibleConstructorReturn3.default)(this, (PortalDropDownTrigger.__proto__ || (0, _getPrototypeOf2.default)(PortalDropDownTrigger)).call(this));

        _this.state = {
            open: false
        };
        _this.node = null;
        // close 与 open 暴露给外层使用
        _this.close = _this.close.bind(_this);
        _this.open = _this.open.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(PortalDropDownTrigger, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            try {
                var counts = _react2.default.Children.count(this.props.children);
                if (counts !== 2) {
                    throw new Error('DropDownTrigger children must be two,like\r\n<DropDownTrigger>\r\n\t<any>click</any>\r\n\t<Dropdown />\r\n</DropDownTrigger>');
                }
            } catch (e) {
                console.log(e);
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var autoCloseTag = this.props.autoCloseTag;

            document.addEventListener('scroll', this._onScroll.bind(this), true);
            if (autoCloseTag) {
                document.addEventListener('mouseup', this.handleAutoClose.bind(this), false);
                document.addEventListener('touchstart', this.handleAutoClose.bind(this), false);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var autoCloseTag = this.props.autoCloseTag;

            document.removeEventListener('scroll', this._onScroll.bind(this));
            if (autoCloseTag) {
                document.removeEventListener('mouseup', this.handleAutoClose.bind(this));
                document.removeEventListener('touchstart', this.handleAutoClose.bind(this));
            }
        }
    }, {
        key: 'handleAutoClose',
        value: function handleAutoClose(e) {
            var autoCloseTag = this.props.autoCloseTag;

            if (!this.state.open) {
                return;
            }
            var path = e.path;

            var hasClose = false;

            for (var i = 0; i < path.length; i++) {
                hasClose = (0, _dom.hasClass)(path[i], autoCloseTag);
                if (hasClose) {
                    break;
                }
            }
            if (hasClose) {
                this.close();
            }
            e.stopPropagation();
        }
    }, {
        key: 'close',
        value: function close() {
            if (this.portal && this.portal.node) {
                // 隐藏的时候.会自动触发onClose方法所以,这里不加入onClose
                this.portal.closePortal();
            }
        }
    }, {
        key: 'open',
        value: function open() {
            if (this.portal && !this.portal.node) {
                this.portal.openPortal();
                // 这里openPOrtal不会触发onOpen方法,所以特意加上.
                this.onOpen();
            }
        }
        // 本可不必,但是为了dropdown显示的时候的动画.

    }, {
        key: '_handleToggle',
        value: function _handleToggle(e) {
            var open = this.state.open;

            if (!open) {
                this.onOpen();
            }
            if (e) {
                e.stopPropagation();
            }
        }
    }, {
        key: '_onScroll',
        value: function _onScroll() {
            if (!this.state.open) {
                return false;
            }
            var placement = this.props.placement;

            this._setPosition(placement);
        }
    }, {
        key: 'getTargetPosition',
        value: function getTargetPosition() {
            var trigger = this.refs.triggerWrap; // 暂时找不到同好的办法获取children的dom节点
            var childrenTarget = trigger.children[0] || [];
            var positionInfo = (0, _util.getPosition)(childrenTarget);
            return positionInfo;
        }
    }, {
        key: 'getDropDownPosition',
        value: function getDropDownPosition() {
            var portal = this.portal.node;
            var dropdown = portal.querySelector('.___dropdown');
            var positionInfo = (0, _util.getPosition)(dropdown);

            return positionInfo;
        }
    }, {
        key: 'checkTargetButtonIsOutOfVisual',
        value: function checkTargetButtonIsOutOfVisual() {
            var trigger = this.refs.triggerWrap; // 暂时找不到同好的办法获取children的dom节点
            var childrenTarget = trigger.children[0];
            var triggerButtonInfo = childrenTarget.getBoundingClientRect();
            var targetCoordinates = {};

            targetCoordinates = getCoordinates(triggerButtonInfo);
            // 是否超出windows
            if ((0, _util.calculateOutOfParent)(targetCoordinates)) {
                return true;
            }
            return false;
        }
    }, {
        key: '_setPosition',
        value: function _setPosition(direction) {
            // 如果portal不存在,证明没有代理到body上
            if (!this.portal) {
                return false;
            }
            var _props = this.props,
                placement = _props.placement,
                offset = _props.offset,
                synchWidth = _props.synchWidth;


            if (direction && typeof direction === 'string') {
                placement = direction;
            }
            var portal = this.portal.node;
            if (!portal || !this.portal) {
                return false;
            }
            var target = this.getTargetPosition();

            var dropdownEle = portal.querySelector('.___dropdown');
            // 这块的逻辑只能放在这
            if (synchWidth) {
                dropdownEle.style.minWidth = 'initial';
                dropdownEle.style.maxWidth = 'initial';
                dropdownEle.style.width = target.width + 'px';
            }

            var dropdown = this.getDropDownPosition();

            var positionInfo = (0, _util.calculatePortalPosition)(placement, target, dropdown, offset);

            dropdownEle.style.top = positionInfo.top + 'px';
            dropdownEle.style.marginTop = 0 + 'px';
            dropdownEle.style.left = positionInfo.left + 'px';

            // 以下的代码都是用来做自动调整位置的
            var visualPos = dropdownEle.getBoundingClientRect();

            // 触发区域已经离开视窗
            var isOutOfVisual = this.checkTargetButtonIsOutOfVisual();

            if (!this.props.autoPlacement) {
                return false;
            }

            if (isOutOfVisual) {
                return false;
            }

            // 自动调整位置
            var newDir = '';

            var visualCoordinate = getCoordinates(visualPos);

            if ((0, _util.calculateOutOfParent)(visualCoordinate)) {
                newDir = this.resetVisualPos(dropdownEle, target, dropdown, offset);
                // console.log("newDir", newDir);
                if (newDir && newDir !== placement) {
                    return this._setPosition(newDir);
                }
            }
        }

        // 动态计算新的位置

    }, {
        key: 'resetVisualPos',
        value: function resetVisualPos(ele, target, dropdown, offset) {
            var synchWidth = this.props.synchWidth;

            if (!ele) {
                return false;
            }
            var domEle = ele.cloneNode(true);
            // domEle.style.visibility = 'hidden';
            document.body.appendChild(domEle);
            for (var i = 0; i < Direction.length; i++) {
                if (synchWidth) {
                    domEle.style.width = target.width + 'px';
                    domEle.style.minWidth = 'initial';
                    domEle.style.maxWidth = 'initial';
                }
                var newDropDown = domEle.getBoundingClientRect();
                var positionInfo = (0, _util.calculatePortalPosition)(Direction[i], target, newDropDown, offset);
                domEle.style.top = positionInfo.top + 'px';
                domEle.style.marginTop = 0 + 'px';
                domEle.style.left = positionInfo.left + 'px';

                var visualPos = domEle.getBoundingClientRect();
                var visualCoordinate = getCoordinates(visualPos);
                var isOutOfWindow = (0, _util.calculateOutOfParent)(visualCoordinate);
                if (!isOutOfWindow) {
                    document.body.removeChild(domEle);
                    return Direction[i];
                }
            }
            document.body.removeChild(domEle);
            return false;
        }
    }, {
        key: 'onOpen',
        value: function onOpen() {
            var _this2 = this;

            setTimeout(function () {
                _this2.props.onOpen();
                _this2.setState({ open: true });
            }, 100);
        }
    }, {
        key: 'onClose',
        value: function onClose() {
            this.setState({ open: false });
            this.props.onClose();
        }
    }, {
        key: 'renderTrigger',
        value: function renderTrigger() {
            var _this3 = this;

            var children = _react2.default.Children.toArray(this.props.children);
            if (!children[0]) {
                return false;
            }
            var onClickFun = function onClickFun(e) {
                if (children[0].props.onClick) {
                    children[0].props.onClick(e);
                }
                _this3._handleToggle(e);
            };

            var firstChild = _react2.default.cloneElement(children[0], { onClick: onClickFun });
            return firstChild;
        }
    }, {
        key: 'renderDropdown',
        value: function renderDropdown() {
            var children = _react2.default.Children.toArray(this.props.children);
            if (!children[1]) {
                return false;
            }
            var className = (0, _classnames2.default)(children[1].props.className, { open: this.state.open, ___dropdown: true });

            var secondChild = _react2.default.cloneElement(children[1], { className: className, style: { display: 'block' } });
            return secondChild;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _props2 = this.props,
                className = _props2.className,
                onClose = _props2.onClose,
                closeOnOutsideClick = _props2.closeOnOutsideClick,
                others = (0, _objectWithoutProperties3.default)(_props2, ['className', 'onClose', 'closeOnOutsideClick']);

            delete others.onOpen;
            return _react2.default.createElement(
                'div',
                { className: (0, _classnames2.default)('mcds-dropdown__trigger', className), ref: 'triggerWrap' },
                _react2.default.createElement(
                    _portal2.default,
                    (0, _extends3.default)({
                        openByClickOn: this.renderTrigger()
                    }, others, {
                        ref: function ref(node) {
                            _this4.portal = node;
                        },
                        closeOnOutsideClick: closeOnOutsideClick,
                        closeOnEsc: true,

                        onOpen: this._setPosition.bind(this),
                        beforeClose: function beforeClose(node, resetPortalState) {
                            _this4.setState({ open: false });
                            onClose();
                            setTimeout(resetPortalState, 100);
                        } }),
                    _react2.default.createElement(
                        'div',
                        null,
                        this.renderDropdown()
                    )
                )
            );
        }
    }]);
    return PortalDropDownTrigger;
}(_react2.default.Component);

PortalDropDownTrigger.propTypes = {
    children: _propTypes2.default.any.isRequired,
    className: _propTypes2.default.string,
    placement: _propTypes2.default.string, // 方向
    autoPlacement: _propTypes2.default.bool,
    synchWidth: _propTypes2.default.bool,
    autoCloseTag: _propTypes2.default.string,
    onClose: _propTypes2.default.func,
    offset: _propTypes2.default.number,
    onOpen: _propTypes2.default.func,
    closeOnOutsideClick: _propTypes2.default.bool,
    target: _propTypes2.default.string // 代码目标 self body
};
exports.default = PortalDropDownTrigger;


PortalDropDownTrigger.defaultProps = {
    onClose: function onClose() {},
    onOpen: function onOpen() {},
    placement: 'right'
};
module.exports = exports['default'];