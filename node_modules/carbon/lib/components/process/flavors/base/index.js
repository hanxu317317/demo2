'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _buttonIcon = require('../../../button-icon');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Process = function (_Component) {
    (0, _inherits3.default)(Process, _Component);

    function Process(props) {
        (0, _classCallCheck3.default)(this, Process);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Process.__proto__ || (0, _getPrototypeOf2.default)(Process)).call(this, props));

        _this.state = {
            stepArr: props.stepArr,
            currentStep: props.currentStep,
            activeStep: props.activeStep || props.currentStep,
            isOpen: props.isOpen,
            haveButton: props.haveButton
        };
        return _this;
    }

    (0, _createClass3.default)(Process, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.currentStep !== this.props.currentStep) {
                var NewCurrentStep = nextProps.currentStep;
                this.setState({ currentStep: NewCurrentStep });
            }
        }
    }, {
        key: '_changeClassname',
        value: function _changeClassname(index) {
            var _state = this.state,
                currentStep = _state.currentStep,
                activeStep = _state.activeStep,
                stepArr = _state.stepArr;

            var className = stepArr[index].className;
            if (className) {
                return className;
            }
            if (index === currentStep) {
                return 'mcds-process__is-current';
            }
            if (index === activeStep) {
                return 'mcds-process__is-incurrent-active';
            } else if (index > currentStep) {
                return 'mcds-process__is-incomplete';
            } else if (index < currentStep) {
                return 'mcds-process__is-complete';
            }
            if (index === stepArr.length && currentStep === stepArr.length) {
                return 'mcds-process__closed-won';
            } else if (index === stepArr.length - 1 && currentStep === -1) {
                return 'mcds-process__closed-lost';
            }
        }
    }, {
        key: '_changeActiveStep',
        value: function _changeActiveStep(index) {
            this.setState({ activeStep: index });
        }
    }, {
        key: '_changecurrentStep',
        value: function _changecurrentStep() {
            var _state2 = this.state,
                currentStep = _state2.currentStep,
                activeStep = _state2.activeStep;
            var _props = this.props,
                stepArr = _props.stepArr,
                onBefore = _props.onBefore,
                onAfter = _props.onAfter;

            if (onBefore) {
                onBefore(activeStep, currentStep);
            }
            if (currentStep !== activeStep) {
                this.setState({ currentStep: activeStep });
            } else if (currentStep === activeStep && activeStep < stepArr.length) {
                activeStep++;
                currentStep = activeStep;
                this.setState({ currentStep: currentStep, activeStep: activeStep });
            }
            if (onAfter) {
                onAfter(activeStep, currentStep);
            }
        }
    }, {
        key: '_changeToggle',
        value: function _changeToggle() {
            var isOpen = this.state.isOpen;
            this.setState({ isOpen: !isOpen });
        }
    }, {
        key: '_renderTab',
        value: function _renderTab() {
            var _state3 = this.state,
                activeStep = _state3.activeStep,
                isOpen = _state3.isOpen;
            var children = this.props.children;

            var childrenElement = null;
            if (isOpen) {
                childrenElement = _react2.default.Children.map(children, function (element, index) {
                    if (element.type === ProcessTabContent && index === activeStep) {
                        return element;
                    }
                    return null;
                });
            }
            return childrenElement;
        }
    }, {
        key: '_renderPath',
        value: function _renderPath() {
            var _this2 = this;

            var stepArr = this.props.stepArr;
            var currentStep = this.state.currentStep;

            return stepArr.map(function (step, index) {
                return _react2.default.createElement(
                    'li',
                    { key: index, className: (0, _classnames2.default)('mcds-process__path-item', _this2._changeClassname(index)), onClick: _this2._changeActiveStep.bind(_this2, index) },
                    _react2.default.createElement(
                        'a',
                        { className: 'mcds-process__path-link' },
                        _react2.default.createElement(
                            'span',
                            { className: 'mcds-process__path-title' },
                            _react2.default.createElement('icon', { className: (0, _classnames2.default)('mcds-process__icon', { 'mcds-icon__checked': currentStep > index }) }),
                            step.text
                        )
                    )
                );
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var buttonText = this.props.buttonText;
            var _state4 = this.state,
                currentStep = _state4.currentStep,
                activeStep = _state4.activeStep,
                haveButton = _state4.haveButton;

            var isCurrent = currentStep === activeStep;
            var buttonElement = _react2.default.createElement(
                'button',
                {
                    className: (0, _classnames2.default)('mcds-process__button', { 'mcds-process__button-is-current': isCurrent, 'mcds-process__button-is-incurrent': !isCurrent }),
                    onClick: this._changecurrentStep.bind(this) },
                _react2.default.createElement('i', { className: (0, _classnames2.default)('mcds-process__icon mcds-text__size-20', { 'mcds-icon__checked-solid-20': currentStep > activeStep }) }),
                buttonText
            );
            return _react2.default.createElement(
                'div',
                { className: 'mcds-process' },
                _react2.default.createElement(
                    'div',
                    { className: 'mcds-grid mcds-process__path-wraper' },
                    _react2.default.createElement(_buttonIcon.ButtonIcon, { className: (0, _classnames2.default)('mcds-icon__container mcds-icon__container-32 mcds-button-icon__more mcds-process__trigger', { 'mcds-process__trigger-open': this.state.isOpen }), icon: 'mcds-icon__arrow-line-20', onClick: this._changeToggle.bind(this) }),
                    _react2.default.createElement(
                        'div',
                        { className: 'mcds-process__path' },
                        _react2.default.createElement(
                            'ul',
                            { className: 'mcds-process__path-nav' },
                            this._renderPath()
                        )
                    ),
                    haveButton ? buttonElement : null
                ),
                this._renderTab()
            );
        }
    }]);
    return Process;
}(_react.Component);

Process.propTypes = {
    stepArr: _propTypes2.default.array.isRequired,
    currentStep: _propTypes2.default.number.isRequired,
    activeStep: _propTypes2.default.number,
    buttonText: _propTypes2.default.string,
    children: _propTypes2.default.any,
    onBefore: _propTypes2.default.func,
    onAfter: _propTypes2.default.func,
    isOpen: _propTypes2.default.bool,
    haveButton: _propTypes2.default.bool
};
Process.defaultProps = {
    stepArr: [{ text: 'Unqualified' }, { text: 'New' }, { text: 'Working' }, { text: 'Nurturing' }, { text: 'Closed' }],
    buttonText: '标记完成',
    // choseText: '选择此状态',
    currentStep: 0,
    activeStep: 0,
    isOpen: true,
    haveButton: true
};


var ProcessTabContent = function ProcessTabContent(_ref) {
    var className = _ref.className,
        children = _ref.children,
        others = (0, _objectWithoutProperties3.default)(_ref, ['className', 'children']);
    return _react2.default.createElement(
        'div',
        (0, _extends3.default)({}, others, { className: (0, _classnames2.default)('mcds-grid mcds-process__tab', className) }),
        children
    );
};

ProcessTabContent.propTypes = {
    className: _propTypes2.default.string,
    children: _propTypes2.default.any
};

exports.default = {
    Process: Process,
    ProcessTabContent: ProcessTabContent
};
module.exports = exports['default'];