'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReadOnlyTextArea = exports.DisabledTextArea = exports.TextArea = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TextArea = exports.TextArea = function (_React$Component) {
    (0, _inherits3.default)(TextArea, _React$Component);

    function TextArea() {
        (0, _classCallCheck3.default)(this, TextArea);
        return (0, _possibleConstructorReturn3.default)(this, (TextArea.__proto__ || (0, _getPrototypeOf2.default)(TextArea)).call(this));
    }

    (0, _createClass3.default)(TextArea, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var active = this.props.active;

            if (active === true && this.refs.textarea) {
                this.refs.textarea.focus();
            }
        }
    }, {
        key: 'handleChange',
        value: function handleChange() {
            this.props.onChange(this.refs.textarea.value);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                label = _props.label,
                placeholder = _props.placeholder,
                error = _props.error,
                others = (0, _objectWithoutProperties3.default)(_props, ['className', 'label', 'placeholder', 'error']);

            return _react2.default.createElement(
                'div',
                { className: (0, _classnames2.default)('mcds-textarea__container', className, { 'mcds-textarea__border': error }) },
                label ? _react2.default.createElement(
                    'label',
                    { className: 'mcds-label' },
                    label
                ) : null,
                _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement('textarea', (0, _extends3.default)({}, others, {
                        onChange: this.handleChange.bind(this),
                        ref: 'textarea',
                        className: 'mcds-textarea',
                        type: 'text',
                        placeholder: placeholder }))
                )
            );
        }
    }]);
    return TextArea;
}(_react2.default.Component);

TextArea.defaultProps = {
    onChange: function onChange() {}
};

TextArea.propTypes = {
    label: _propTypes2.default.string,
    onChange: _propTypes2.default.func,
    className: _propTypes2.default.string,
    placeholder: _propTypes2.default.string,
    error: _propTypes2.default.bool,
    active: _propTypes2.default.bool
};

var DisabledTextArea = function DisabledTextArea(_ref) {
    var className = _ref.className,
        label = _ref.label,
        placeholder = _ref.placeholder,
        error = _ref.error,
        others = (0, _objectWithoutProperties3.default)(_ref, ['className', 'label', 'placeholder', 'error']);
    return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('mcds-textarea__container', className, { 'mcds-textarea__border': error }) },
        label ? _react2.default.createElement(
            'label',
            { className: 'mcds-label' },
            label
        ) : null,
        _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement('textarea', (0, _extends3.default)({}, others, { className: 'mcds-textarea__disabled', type: 'text', placeholder: placeholder, disabled: true }))
        )
    );
};

exports.DisabledTextArea = DisabledTextArea;
DisabledTextArea.propTypes = {
    label: _propTypes2.default.string,
    className: _propTypes2.default.string,
    placeholder: _propTypes2.default.string,
    error: _propTypes2.default.bool
};

var ReadOnlyTextArea = exports.ReadOnlyTextArea = function ReadOnlyTextArea(_ref2) {
    var className = _ref2.className,
        label = _ref2.label,
        placeholder = _ref2.placeholder,
        error = _ref2.error;
    return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('mcds-textarea__container', className, { 'mcds-textarea__border': error }) },
        label ? _react2.default.createElement(
            'label',
            { className: 'mcds-label' },
            label
        ) : null,
        _react2.default.createElement(
            'div',
            { className: 'mcds-textarea__readonly' },
            _react2.default.createElement(
                'p',
                null,
                placeholder
            )
        )
    );
};

ReadOnlyTextArea.propTypes = {
    label: _propTypes2.default.string,
    className: _propTypes2.default.string,
    placeholder: _propTypes2.default.string,
    error: _propTypes2.default.bool
};