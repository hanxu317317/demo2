'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMarkdown = require('react-markdown');

var _reactMarkdown2 = _interopRequireDefault(_reactMarkdown);

var _index = require('../form/index');

var _index2 = require('./../button-icon/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SelectDefault = _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
        _index.Select,
        { error: true, label: '\u4E0B\u62C9\u83DC\u5355', value: 123, onChange: function onChange(v) {
                console.log('\u4E0B\u62C9\u83DC\u5355value-' + v);
            } },
        _react2.default.createElement(
            'option',
            { value: 123, className: 'closed close' },
            'A'
        ),
        _react2.default.createElement(
            'option',
            { value: 456 },
            'B'
        ),
        _react2.default.createElement(
            'option',
            { value: 789 },
            'C'
        )
    ),
    _react2.default.createElement(
        _index.Select,
        { error: true, label: '\u4E0A\u62C9\u83DC\u5355', value: 789, onChange: function onChange(v) {
                console.log('\u4E0B\u62C9\u83DC\u5355value-' + v);
            } },
        _react2.default.createElement(
            'option',
            null,
            '123'
        ),
        _react2.default.createElement(
            'option',
            null,
            '456'
        ),
        _react2.default.createElement(
            'option',
            null,
            '789'
        )
    )
);

var ComboxSelectDefault = _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
        _index.ComboxSelect,
        { error: true, label: '\u4E0B\u62C9\u83DC\u5355', value: 123, onChange: function onChange(v) {
                console.log('\u4E0B\u62C9\u83DC\u5355value-' + v);
            } },
        _react2.default.createElement(
            'option',
            { value: 123, className: 'closed close' },
            'Jack'
        ),
        _react2.default.createElement(
            'option',
            { value: 456 },
            'Lucy'
        ),
        _react2.default.createElement(
            'option',
            { value: 789 },
            'Tom'
        )
    )
);

var CheckboxAddButtonExa = _react2.default.createElement(_index.CheckboxAddButton, {
    label: 'add checkbox',
    name: 'addButton',
    id: 'addButton',
    callback: function callback(val) {
        return console.log('checked', val);
    } });

var CheckboxGroupExa = _react2.default.createElement(
    _index.CheckboxGroup,
    { groupLable: 'checkbox Group' },
    _react2.default.createElement(_index.Checkbox, { id: 'checkboxGroup1', label: 'Lable Checkbox', name: 'checkboxGroup1', checked: true }),
    _react2.default.createElement(_index.Checkbox, { id: 'checkboxGroup2', label: 'Indeterminate Checkbox', name: 'checkboxGroup2', checked: true, indeterminate: true }),
    _react2.default.createElement(_index.Checkbox, { id: 'checkboxGroup3', label: 'Lable Checkbox', name: 'checkboxGroup3' })
);

var RequiredCheckboxGroupExa = _react2.default.createElement(
    _index.RequiredCheckboxGroup,
    { groupLable: 'checkbox Group', errorMsg: 'This is required' },
    _react2.default.createElement(_index.Checkbox, { id: 'checkboxGroup4', label: 'Lable Checkbox', name: 'checkboxGroup4' }),
    _react2.default.createElement(_index.Checkbox, { id: 'checkboxGroup5', label: 'Lable Checkbox disabled', name: 'checkboxGroup5', disabled: true }),
    _react2.default.createElement(_index.Checkbox, { id: 'checkboxGroup6', label: 'Indeterminate Checkbox', name: 'checkboxGroup6', indeterminate: true })
);

var AlternateCheckboxGroupExa = _react2.default.createElement(
    _index.AlternateCheckboxGroup,
    { label: 'Scheduled Day(s)' },
    _react2.default.createElement(
        _index.AlternateCheckbox,
        { id: 'monday3', name: 'checkbox', disabled: 'true', value: 'Mon123' },
        'Mon'
    ),
    _react2.default.createElement(
        _index.AlternateCheckbox,
        { id: 'tuesday3', name: 'checkbox', disabled: 'true', value: 'Tue' },
        'Tue'
    ),
    _react2.default.createElement(
        _index.AlternateCheckbox,
        { id: 'wednesday3', name: 'checkbox', disabled: 'true', value: 'Wed' },
        'Wed'
    ),
    _react2.default.createElement(
        _index.AlternateCheckbox,
        { id: 'thursday3', name: 'checkbox', disabled: 'true', value: 'Thu' },
        'Thu'
    ),
    _react2.default.createElement(
        _index.AlternateCheckbox,
        { id: 'friday3', name: 'checkbox', disabled: 'true', value: 'Fri' },
        'Fri'
    )
);

var AlternateCheckboxExa = _react2.default.createElement(
    _index.AlternateCheckboxGroup,
    { label: 'Scheduled Day(s)' },
    _react2.default.createElement(
        _index.AlternateCheckbox,
        { id: 'monday2', name: 'checkbox', checked: 'true', value: 'Mon', callback: function callback(val) {
                return console.log(val);
            } },
        'Mon'
    ),
    _react2.default.createElement(
        _index.AlternateCheckbox,
        { id: 'tuesday2', name: 'checkbox', checked: 'true', value: 'Tue', callback: function callback(val) {
                return console.log(val);
            } },
        'Tue'
    ),
    _react2.default.createElement(
        _index.AlternateCheckbox,
        { id: 'wednesday2', name: 'checkbox', checked: 'true', value: 'Wed', callback: function callback(val) {
                return console.log(val);
            } },
        'Wed'
    ),
    _react2.default.createElement(
        _index.AlternateCheckbox,
        { id: 'thursday2', name: 'checkbox', value: 'Thu', callback: function callback(val) {
                return console.log(val);
            } },
        'Thu'
    ),
    _react2.default.createElement(
        _index.AlternateCheckbox,
        { id: 'friday2', name: 'checkbox', value: 'Fri' },
        'Fri'
    )
);

var AlternateGroupExa = _react2.default.createElement(
    _index.AlternateGroup,
    { label: 'Scheduled Day(s)' },
    _react2.default.createElement(
        _index.AlternateRadio,
        { name: 'radio', callback: function callback(val) {
                return console.log(val);
            } },
        'Mon'
    ),
    _react2.default.createElement(
        _index.AlternateRadio,
        { name: 'radio' },
        'Tue'
    ),
    _react2.default.createElement(
        _index.AlternateRadio,
        { name: 'radio' },
        'Wed'
    ),
    _react2.default.createElement(
        _index.AlternateRadio,
        { name: 'radio' },
        'Thu'
    ),
    _react2.default.createElement(
        _index.AlternateRadio,
        { id: 'friday', name: 'radio' },
        'Fri'
    )
);

var AlternateRadioDisableExa = _react2.default.createElement(
    _index.AlternateGroup,
    { label: 'Scheduled Day(s)' },
    _react2.default.createElement(
        _index.AlternateRadio,
        { name: 'radio', disabled: 'true' },
        'Mon'
    ),
    _react2.default.createElement(
        _index.AlternateRadio,
        { name: 'radio', disabled: 'true' },
        'Tue'
    ),
    _react2.default.createElement(
        _index.AlternateRadio,
        { name: 'radio', disabled: 'true' },
        'Wed'
    ),
    _react2.default.createElement(
        _index.AlternateRadio,
        { name: 'radio', disabled: 'true' },
        'Thu'
    ),
    _react2.default.createElement(
        _index.AlternateRadio,
        { name: 'radio', disabled: 'true' },
        'Fri'
    )
);

var RequiredRadioExa = _react2.default.createElement(
    _index.RequiredRadioGroup,
    { groupLable: 'Radio Group', errorMsg: '\u76EE\u524D\u6CA1\u592A\u60F3\u660E\u767D' },
    _react2.default.createElement(_index.Radio, {
        id: 'Label1',
        label: 'Radio Label',
        name: 'requiredName',
        defaultValue: 'value1',
        onChange: function onChange(val) {
            console.log(val);
        }, checked: true }),
    _react2.default.createElement(_index.Radio, {
        id: 'Label2',
        label: 'Radio Label',
        name: 'requiredName',
        defaultValue: 'value2',
        onChange: function onChange(val) {
            console.log(val);
        } })
);

var RadioGroupDisableExa = _react2.default.createElement(
    _index.RadioGroup,
    { groupLable: 'Radio Group' },
    _react2.default.createElement(_index.Radio, { label: 'Radio Label', name: 'name', disabled: true }),
    _react2.default.createElement(_index.Radio, { label: 'Radio Label', name: 'name', disabled: true })
);

var RadioGroupExa = _react2.default.createElement(
    _index.RadioGroup,
    { groupLable: 'Radio Group' },
    _react2.default.createElement(_index.Radio, { id: 'Label3', label: 'Radio Label', name: 'name', checked: true }),
    _react2.default.createElement(_index.Radio, { id: 'Label4', label: 'Radio Label', name: 'name' })
);

var InputRequirdExa = _react2.default.createElement(_index.InputRequird, {
    error: false,
    id: 'InputRequird1',
    icon: 'mcds-mg__right mcds-icon__warning-line',
    label: 'label Input',
    required: 'required',
    errorMsg: '\u51FD\u6570\u8FD4\u56DEtrue\u663E\u793A',
    validReg: '/\\d+/',
    validFun: function validFun(val) {
        return (/\d+/.test(val)
        );
    },
    onChange: function onChange(val) {
        console.log(val);
    },
    placeholder: 'Placeholder text' });

var InputRequirdCode = '<InputRequird\n    id="InputRequird1"\n    icon="mcds-mg__right mcds-icon__warning-line"\n    label="label Input"\n    required="required"\n    errorMsg="\u51FD\u6570\u8FD4\u56DEtrue\u663E\u793A"\n    validReg="/d+/"\n    validFun={ (val) => /d+/.test(val) }\n    placeholder="Placeholder text" />\n';

var TextAreaRequiredExa = _react2.default.createElement(_index.TextAreaRequired, {
    error: true,
    id: 'TextAreaRequired',
    label: 'textarea label',
    name: 'textarea',
    placeholder: 'placeholder',
    errorMsg: '\u51FD\u6570\u8FD4\u56DEtrue\u663E\u793A',
    validFun: function validFun(val) {
        return (/\d+/.test(val)
        );
    } });

var FormHorizontal = _react2.default.createElement(
    'div',
    { className: 'mcds-form__horizontal mcds-form__width' },
    _react2.default.createElement(_index.Input, {
        error: false,
        className: 'mcds-inline',
        label: 'label Input333',
        id: 'Input',
        name: 'user',
        placeholder: 'Placeholder text' }),
    _react2.default.createElement(_index.TextArea, { error: true, className: 'mcds-inline mcds-top', label: 'textarea label', name: 'textarea', placeholder: 'placeholder' }),
    _react2.default.createElement(
        _index.CheckboxGroup,
        { className: 'mcds-inline mcds-top', groupLable: 'checkbox Group' },
        _react2.default.createElement(_index.Checkbox, { id: 'checkboxGroup1', label: 'Lable Checkbox', name: 'checkboxGroup1', checked: true }),
        _react2.default.createElement(_index.Checkbox, { id: 'checkboxGroup2', label: 'Lable Checkbox', name: 'checkboxGroup2', checked: true }),
        _react2.default.createElement(_index.Checkbox, { id: 'checkboxGroup3', label: 'Lable Checkbox', name: 'checkboxGroup3' })
    ),
    _react2.default.createElement(
        _index.RadioGroup,
        { className: 'mcds-inline mcds-top', groupLable: 'Radio Group' },
        _react2.default.createElement(_index.Radio, { id: 'Label5', label: 'Radio Label', name: 'name' }),
        _react2.default.createElement(_index.Radio, { id: 'Label6', label: 'Radio Label', name: 'name' })
    )
);

var FromMultiSelectExa = _react2.default.createElement(
    'div',
    { className: 'mcds-grid' },
    _react2.default.createElement(
        _index.FromMultiSelect,
        { label: 'First Category' },
        _react2.default.createElement(
            'li',
            { className: 'mcds-picklist__item' },
            'Option One'
        ),
        _react2.default.createElement(
            'li',
            { className: 'mcds-picklist__item mcds-picklist__active' },
            'Option Tow'
        ),
        _react2.default.createElement(
            'li',
            { className: 'mcds-picklist__item' },
            'Option Three'
        )
    ),
    _react2.default.createElement(
        'div',
        { className: 'mcds-grid mcds-picklist__vertical' },
        _react2.default.createElement(_index2.ButtonSmallIcon, { className: 'mcds-picklist__icon-color', icon: 'mcds-icon__triangle-solid-14 mcds-icon__rotate-90' }),
        _react2.default.createElement(_index2.ButtonSmallIcon, { className: 'mcds-m__t-13 mcds-picklist__icon-color', icon: 'mcds-icon__triangle-solid-14 mcds-icon__rotate-270' })
    ),
    _react2.default.createElement(
        _index.FromMultiSelect,
        { label: 'Two Category' },
        _react2.default.createElement(
            'li',
            { className: 'mcds-picklist__item' },
            'Option One'
        ),
        _react2.default.createElement(
            'li',
            { className: 'mcds-picklist__item' },
            'Option Three'
        )
    )
);

var CheckboxDeomCode = '\nclass CheckboxDeom extends React.Component {\n    render() {\n        return (\n            <div>   \n                <Checkbox checked label="Lable Checkbox" />\n                <Checkbox indeterminate label="Lable Checkbox Indeterminate" />\n            </div>\n            \n        )\n    }\n}';

var CheckboxDeom = function (_React$Component) {
    (0, _inherits3.default)(CheckboxDeom, _React$Component);

    function CheckboxDeom() {
        (0, _classCallCheck3.default)(this, CheckboxDeom);
        return (0, _possibleConstructorReturn3.default)(this, (CheckboxDeom.__proto__ || (0, _getPrototypeOf2.default)(CheckboxDeom)).apply(this, arguments));
    }

    (0, _createClass3.default)(CheckboxDeom, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(_index.Checkbox, { checked: true, label: 'Lable Checkbox' }),
                _react2.default.createElement(_index.Checkbox, { indeterminate: true, label: 'Lable Checkbox Indeterminate' })
            );
        }
    }]);
    return CheckboxDeom;
}(_react2.default.Component);

var InputDemo = _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(_index.Input, {
        error: false,
        active: true,
        label: 'label Input111',
        name: 'user',
        iconRight: _react2.default.createElement(
            'span',
            null,
            '123'
        ),
        placeholder: 'Placeholder text',
        value: 'demo' }),
    _react2.default.createElement(_index.Input, {
        error: false,
        active: true,
        label: 'label Input111',
        name: 'user',
        placeholder: 'Placeholder text' }),
    _react2.default.createElement(_index.Input, {
        error: false,
        active: false,
        label: 'label Input222',
        iconLeft: 'mcds-icon__data-line-20',
        iconRight: _react2.default.createElement('span', { className: 'mcds-icon__time-line-20' }),
        name: 'user', placeholder: 'Placeholder text' })
);

// export default Forms;
exports.default = [{
    id: 'Label Input',
    intro: _react2.default.createElement(_reactMarkdown2.default, { className: 'markdown', source: '##### Input参数\r\n\r\n- 一切等同于html原生inpu\r\n- iconLeft [string, element]\r\n- iconRight [string, element]\r\n- label [string] label名称' }),
    element: InputDemo
}, {
    id: 'InputReadOnly',
    element: _react2.default.createElement(_index.DisabledInput, { error: true, label: 'label Input', name: 'userName', placeholder: 'Placeholder text' })
}, {
    id: 'InputReadOnlyBottom',
    element: _react2.default.createElement(_index.ReadOnlyInput, { error: true, label: 'label Input', value: 'Read Only', name: 'InputReadOnlyBottom' })
}, {
    id: 'InputRequird',
    element: InputRequirdExa,
    code: InputRequirdCode
}, {
    id: 'ReadOnlyFixedTextCode',
    element: _react2.default.createElement(_index.ReadOnlyFixedText, { error: true, label: 'label Input', value: 'Read Only', left: '$', right: '%' })
}, {
    id: 'InputSearchRight',
    element: _react2.default.createElement(_index.InputSearch, {
        onClick: function onClick(val) {
            console.log('callback111', val);
        },
        error: true,
        label: 'label Input',
        placeholder: 'Placeholder text',
        search: 'right',
        searchCallback: function searchCallback(val) {
            console.log('callback', val);
        } }),
    code: '<InputSearch label="label Input" placeholder="Placeholder text" search="right" />',
    intro: _react2.default.createElement(_reactMarkdown2.default, { className: 'markdown', source: '#### InputSearch\r\n* iconClass 默认为 mcds-icon__search-line-20 可传其他icon\r\n* search 两个值 控制icon在哪边显示 left为左 right 为右\r\n* 如果search 和 clear同时存在 那么 search=\"left\" clear=\"right\r\n* searchCallback search icon 点击回调\r\n' })
}, {
    id: 'InputSearchLeft',
    element: _react2.default.createElement(_index.InputSearch, { error: true, label: 'label Input', placeholder: 'Placeholder text', search: 'left' }),
    code: '<InputSearch label="label Input" placeholder="Placeholder text" search="left" />'
}, {
    id: 'InputSearchSide',
    element: _react2.default.createElement(_index.InputSearch, { error: true, label: 'label Input', placeholder: 'Placeholder text', search: 'left', clear: 'right' }),
    code: '<InputSearch label="label Input" placeholder="Placeholder text" search="left" clear="right" />'
}, {
    id: 'FixedInput',
    element: _react2.default.createElement(_index.FixedInput, { error: true, label: 'label Input', placeholder: 'Placeholder text', left: '$', right: '%' })
}, {
    id: 'TextArea',
    element: _react2.default.createElement(_index.TextArea, { error: true, label: 'textarea label', onChange: function onChange(val) {
            console.log(val);
        }, name: 'textarea', placeholder: 'placeholder' })
}, {
    id: 'DisabledTextArea',
    element: _react2.default.createElement(_index.DisabledTextArea, { error: true, label: 'textarea label', name: 'textarea', placeholder: 'placeholder' })
}, {
    id: 'ReadOnlyTextArea',
    element: _react2.default.createElement(_index.ReadOnlyTextArea, { error: true, label: 'textarea label', name: 'textarea', placeholder: 'Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna.' })
}, {
    id: 'TextAreaRequired',
    element: TextAreaRequiredExa
}, {
    id: 'FormHorizontal',
    element: FormHorizontal
}, {
    id: 'Select',
    element: SelectDefault,
    intro: _react2.default.createElement(_reactMarkdown2.default, { className: 'markdown', source: '##### Select\r\n\r\n###### Select默认是下拉菜单,同时也支持上拉\r\n\r\n```\r\n<Select className=\"mcds-select__top\">\r\n\t...\r\n</Select>\r\n```' })
}, {
    id: 'ComboxSelect',
    element: ComboxSelectDefault,
    intro: _react2.default.createElement(_reactMarkdown2.default, { className: 'markdown', source: '##### ComboxSelectDefault\r\n\r\n###### ComboxSelectDefault默认是下拉菜单,同时也支持上拉\r\n\r\n```\r\n<ComboxSelectDefault className=\"mcds-select__top\">\r\n\t...\r\n</ComboxSelectDefault>\r\n```' })
}, {
    id: 'checkboxAddButton',
    element: CheckboxAddButtonExa,
    intro: _react2.default.createElement(_reactMarkdown2.default, { className: 'markdown', source: '#### CheckboxAddButton\r\n* 需要传id\r\n* checked disabled 为bool值 分别为选中和禁用\r\n* callback 为回调,参数为选中与否,返回值为true/false' })
}, {
    id: 'CheckboxGroup',
    element: CheckboxGroupExa
}, {
    id: 'CheckboxRequired',
    element: RequiredCheckboxGroupExa
}, {
    id: 'CheckboxRequired',
    element: _react2.default.createElement(_index.Checkbox, { id: 'checkbox2', 'data-label': 'Lable Checkbox', name: 'checkbox1', required: true, errorMsg: 'This is required' })
}, {
    id: 'Checkbox',
    // element: <Checkbox id="checkbox1" label="Lable Checkbox" name="checkbox1" onClick={(e) => console.log(e.target.checked)} />
    element: _react2.default.createElement(CheckboxDeom, null),
    code: CheckboxDeomCode
}, {
    id: 'CheckboxToggle',
    element: _react2.default.createElement(_index.CheckboxToggle, { callback: function callback(val) {
            return console.log(val);
        }, className: 'mcds-checkbox__toggle', lable: 'checkbox toggle', checked: true })
}, {
    id: 'ToggleDisabled',
    element: _react2.default.createElement(_index.CheckboxToggle, { className: 'mcds-checkbox__toggle', lable: 'checkbox toggle', disabled: true })
}, {
    id: 'smallToggle',
    element: _react2.default.createElement(_index.CheckboxToggle, { className: 'mcds-small-checkbox__toggle', lable: 'checkbox toggle' })
}, {
    id: 'smallDisabledToggle',
    element: _react2.default.createElement(_index.CheckboxToggle, { className: 'mcds-small-checkbox__toggle', lable: 'checkbox toggle', disabled: true })
}, {
    id: 'AlternateCheckbox',
    element: AlternateCheckboxExa,
    intro: _react2.default.createElement(_reactMarkdown2.default, { className: 'markdown', source: '#### AlternateCheckbox/AlternateRadio\r\n* checked disabled \"true\"/\"false\" 分别为选中和禁用\r\n* callback 为回调，参数为选中与否，返回值为true/false' })

}, {
    id: 'AlternateDisable',
    element: AlternateCheckboxGroupExa
}, {
    id: 'AlternateGroup',
    element: AlternateGroupExa
}, {
    id: 'AlternateRadioDisable',
    element: AlternateRadioDisableExa
}, {
    id: 'RequiredRadio',
    element: RequiredRadioExa
}, {
    id: 'RadioGroupDisable',
    element: RadioGroupDisableExa
}, {
    id: 'RadioGroup',
    element: RadioGroupExa
}, {
    id: 'FromMultiSelectExa',
    element: FromMultiSelectExa
}];
module.exports = exports['default'];