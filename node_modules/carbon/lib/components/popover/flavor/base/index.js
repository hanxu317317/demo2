'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _index = require('../_base/index');

var _portal = require('../../../../base-components/portal');

var _portal2 = _interopRequireDefault(_portal);

var _dom = require('../../../../utils/dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * <PopoverTrigger container={this} placement="top" triggerBy={triggerBy}>
 */

var PopoverTrigger = function (_Component) {
    (0, _inherits3.default)(PopoverTrigger, _Component);

    function PopoverTrigger(props) {
        (0, _classCallCheck3.default)(this, PopoverTrigger);

        var _this = (0, _possibleConstructorReturn3.default)(this, (PopoverTrigger.__proto__ || (0, _getPrototypeOf2.default)(PopoverTrigger)).call(this, props));

        _this.state = {
            show: false
        };
        _this.node = null;
        _this.trigger = _react2.default.cloneElement(props.children);
        _this.overlay = _react2.default.cloneElement(props.overlay);
        _this.placement = props.placement || 'left';
        return _this;
    }

    (0, _createClass3.default)(PopoverTrigger, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            document.addEventListener('scroll', this.onScroll.bind(this), true);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            document.removeEventListener('scroll', this.onScroll.bind(this));
        }
    }, {
        key: 'onScroll',
        value: function onScroll() {
            if (this.state.show) {
                this._setPosition();
            }
        }
    }, {
        key: 'onOpen',
        value: function onOpen(node) {
            var _this2 = this;

            this.portalNode = node;
            this._setPosition(node);
            setTimeout(function () {
                _this2.setState({ show: true });
            }, 100);
        }
    }, {
        key: 'onClose',
        value: function onClose() {
            this.props.onClose.bind(this);
        }
        /**
         * [用来翻转placement方向的方法]
         * @param  {[string]} direction [direction可以为'left','right','']
         * @return {[type]}           [description]
         */

    }, {
        key: '_reverseDirection',
        value: function _reverseDirection(direction) {
            var reverse = {
                left: 'right',
                right: 'left',
                top: 'bottom',
                bottom: 'top'
            };
            var _dirArray = direction.split('-');

            _dirArray.forEach(function (v, index) {
                _dirArray[index] = reverse[v];
            });

            return _dirArray.join('-');
        }
        /**
         * [_getPositionInfo 获取触发器的dom位置]
         * @return {[type]} [description]
         */

    }, {
        key: '_getPositionInfo',
        value: function _getPositionInfo() {
            var trigger = this.node; // 暂时找不到同好的办法获取children的dom节点
            var childrenTarget = trigger.children || [];
            var positionInfo = {};
            if (childrenTarget.length === 1) {
                positionInfo = (0, _index.getPosition)(childrenTarget[0]);
            } else {
                positionInfo = (0, _index.getPosition)(trigger);
            }
            positionInfo = (0, _index.getPosition)(trigger);

            return positionInfo;
        }
        /**
         * 设置portal下边的popover的top.left
         * @param {react.node} portalNode
         */

    }, {
        key: '_setPosition',
        value: function _setPosition() {
            var portalNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.portalNode;

            if (!portalNode) {
                return false;
            }
            var placement = this.props.placement;

            var arrow = 'mcds-popover__arrow__' + this._reverseDirection(placement); // 箭头前缘
            var positionInfo = this._getPositionInfo(); // 触发元素的dom位置
            var portal = portalNode; // portal 在root节点的元素

            var popover = portal.querySelector('.mcds-popover'); // 获取到的portal中显示的popover

            if (popover && !(0, _dom.hasClass)(popover, arrow)) {
                (0, _dom.addClass)(popover, arrow);
            }

            if (!popover) {
                return null;
            }
            var popoverPositionInfo = (0, _index.getPosition)(popover); // 获取popover元素在dom中的位置信息与尺寸信息

            var _calculatePosition2 = this._calculatePosition(positionInfo, popoverPositionInfo),
                top = _calculatePosition2.top,
                left = _calculatePosition2.left;

            popover.style.top = top + 'px';
            popover.style.left = left + 'px';
        }
        /**
         * 计算位置,可以通过case扩展
         * @param  {[type]} targetInfo  [description]
         * @param  {[type]} popoverInfo [description]
         * @return {[type]}             [description]
         */

    }, {
        key: '_calculatePosition',
        value: function _calculatePosition(targetInfo, popoverInfo) {
            var _props$placement = this.props.placement,
                placement = _props$placement === undefined ? 'left' : _props$placement;

            var offset = 5;
            var result = {};
            var arrow = 12;
            switch (placement) {
                case 'left':
                    result.top = targetInfo.top + (targetInfo.height - popoverInfo.height) / 2;
                    result.left = targetInfo.left - popoverInfo.width - arrow - offset;
                    break;
                case 'top':
                    result.left = targetInfo.left + (targetInfo.width - popoverInfo.width) / 2;
                    result.top = targetInfo.top - popoverInfo.height - arrow - offset;
                    break;
                case 'right':
                    result.top = targetInfo.top + (targetInfo.height - popoverInfo.height) / 2;
                    result.left = targetInfo.left + targetInfo.width + offset;
                    break;
                case 'bottom':
                    result.left = targetInfo.left + (targetInfo.width - popoverInfo.width) / 2;
                    result.top = targetInfo.top + targetInfo.height + offset;
                    break;
                case 'left-top':
                    result.top = targetInfo.top + targetInfo.height / 2 - popoverInfo.height + 24;
                    result.left = targetInfo.left - popoverInfo.width - arrow - offset;
                    break;
                case 'left-bottom':
                    result.top = targetInfo.top + targetInfo.height / 2 - 24;
                    result.left = targetInfo.left - popoverInfo.width - arrow - offset;
                    break;
                case 'top-left':
                    result.top = targetInfo.top - popoverInfo.height - arrow - offset;
                    result.left = targetInfo.left + targetInfo.width / 2 - popoverInfo.width + 24;
                    break;
                case 'top-right':
                    result.top = targetInfo.top - popoverInfo.height - arrow - offset;
                    result.left = targetInfo.left + (targetInfo.width - 48) / 2;
                    break;
                case 'right-top':
                    result.top = targetInfo.top + targetInfo.height / 2 - popoverInfo.height + 24;
                    result.left = targetInfo.left + targetInfo.width + arrow + offset;
                    break;
                case 'right-bottom':
                    result.left = targetInfo.left + targetInfo.width + arrow + offset;
                    result.top = targetInfo.top + targetInfo.height / 2 - 24;
                    break;
                case 'bottom-left':
                    result.top = targetInfo.top + targetInfo.height + offset;
                    result.left = targetInfo.left + targetInfo.width / 2 - popoverInfo.width + 24;
                    break;
                case 'bottom-right':
                    result.top = targetInfo.top + targetInfo.height + offset;
                    result.left = targetInfo.left + (targetInfo.width - 48) / 2;
                    break;
                default:
                    console.log('no placement');
            }
            return result;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var trigg_buton = this.props.children;
            var _props = this.props,
                triggerBy = _props.triggerBy,
                onMouseOver = _props.onMouseOver,
                onMouseOut = _props.onMouseOut;

            var className = (0, _classnames2.default)(this.props.className, { 'mcds-popover__show': this.state.show });
            return _react2.default.createElement(
                'div',
                { ref: function ref(node) {
                        return _this3.node = node;
                    }, className: 'mcds-popover-trigger mcds-popover-trigger__open mcds-truncate' },
                _react2.default.createElement(
                    _portal2.default,
                    {
                        ref: 'portal',
                        openByClickOn: triggerBy === 'click' ? trigg_buton : null,
                        openByHoverOn: triggerBy === 'hover' ? trigg_buton : null,
                        onMouseOver: onMouseOver,
                        onMouseOut: onMouseOut,
                        closeOnOutsideClick: triggerBy === 'click' ? true : false,
                        onOpen: this.onOpen.bind(this),
                        beforeClose: function beforeClose(node, resetPortalState) {
                            _this3.setState({ show: false });
                            _this3.props.onClose();
                            setTimeout(resetPortalState, 100);
                        } },
                    _react2.default.createElement(
                        'div',
                        { className: className },
                        this.props.overlay
                    )
                )
            );
        }
    }]);
    return PopoverTrigger;
}(_react.Component);

exports.default = PopoverTrigger;


PopoverTrigger.propTypes = {
    children: _propTypes2.default.any.isRequired,
    className: _propTypes2.default.string,
    overlay: _propTypes2.default.element.isRequired,
    trigger: _propTypes2.default.string,
    placement: _propTypes2.default.string,
    onClose: _propTypes2.default.func,
    triggerBy: _propTypes2.default.oneOf(['click', 'hover'])
};

PopoverTrigger.defaultProps = {
    onOpen: function onOpen() {},
    onClose: function onClose() {},
    onUpdate: function onUpdate() {},
    triggerBy: 'hover',
    className: ''
};
module.exports = exports['default'];