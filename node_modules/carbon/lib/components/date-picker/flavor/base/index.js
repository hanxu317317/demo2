'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _dom = require('../../../../utils/dom');

var _base = require('../_base');

var _index = require('../../../dropdown/index');

var _dayCalendar = require('./day-calendar');

var _dayCalendar2 = _interopRequireDefault(_dayCalendar);

var _yearCalendar = require('./year-calendar');

var _yearCalendar2 = _interopRequireDefault(_yearCalendar);

var _monthCalendar = require('./month-calendar');

var _monthCalendar2 = _interopRequireDefault(_monthCalendar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _renderState = ['Year', 'Month', 'Day'];
// import Portal from '../../../../base-components/portal';

var DatePicker = function (_React$Component) {
    (0, _inherits3.default)(DatePicker, _React$Component);

    function DatePicker(props) {
        (0, _classCallCheck3.default)(this, DatePicker);

        var _this = (0, _possibleConstructorReturn3.default)(this, (DatePicker.__proto__ || (0, _getPrototypeOf2.default)(DatePicker)).call(this, props));

        _this.state = {
            show: false,
            renderState: 'Day',
            init: props.init,
            tmpValue: props.init
        };

        _this.getValue = _this.getValue.bind(_this);
        // this.handleOnOpen = this.handleOnOpen.bind(this);
        _this.handleOnClose = _this.handleOnClose.bind(_this);
        _this._handleTrigger = _this._handleTrigger.bind(_this);
        _this._setToday = _this._setToday.bind(_this);
        _this._yearCellChanged = _this._yearCellChanged.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(DatePicker, [{
        key: 'renderYear',
        value: function renderYear() {
            var pointer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;

            return _react2.default.createElement(_yearCalendar2.default, { init: pointer.state.init, cellChanged: pointer._yearCellChanged.bind(pointer) });
        }
    }, {
        key: 'renderMonth',
        value: function renderMonth() {
            var pointer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;

            return _react2.default.createElement(_monthCalendar2.default, { init: pointer.state.init, cellChanged: pointer._monthCellChanged.bind(pointer) });
        }
    }, {
        key: 'renderDay',
        value: function renderDay() {
            var pointer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;

            return _react2.default.createElement(_dayCalendar2.default, { init: pointer.state.init, rangeSelected: true, cellChanged: pointer._dayCellChanged.bind(pointer) });
        }
    }, {
        key: '_yearCellChanged',
        value: function _yearCellChanged(param) {
            this._CellChanged(param);
        }
    }, {
        key: '_monthCellChanged',
        value: function _monthCellChanged(param) {
            this._CellChanged(param);
        }
    }, {
        key: '_dayCellChanged',
        value: function _dayCellChanged(param) {

            var timestamp = (0, _moment2.default)(param.year + '-' + param.month + '-' + param.day, 'YYYY-MM-DD').format('x');
            this._CellChanged(param);
            this.props.onChange(timestamp);
            this.setState({ tmpValue: timestamp });

            this.refs.DropDownTrigger.close(); // portal内部方法,关闭portal
        }
    }, {
        key: '_CellChanged',
        value: function _CellChanged(param) {
            var year = param.year,
                month = param.month,
                day = param.day;

            if (year === (0, _moment2.default)().year()) {
                // 处理当前年份为本年,月份默认是当前月||本年,本月,则当前月份是当日.
                if (_lodash2.default.isUndefined(month)) {
                    month = (0, _moment2.default)().month() + 1;
                } else if (month === (0, _moment2.default)().month() + 1 && _lodash2.default.isUndefined(day)) {
                    day = new Date().getDate();
                }
            } else {
                if (!month) {
                    month = 1;
                }
                if (!day) {
                    day = 1;
                }
            }

            var _array = [year, month, day];
            var array = [];
            // 构建月份 不足10的.做成02,03的形式
            _array.forEach(function (v) {
                if (!_lodash2.default.isUndefined(v)) {
                    array.push(v >= 10 ? String(v) : '0' + v);
                }
            });

            var stringDate = array.join('-');
            var init = (0, _moment2.default)(stringDate).valueOf();
            var renderStateIndex = _lodash2.default.indexOf(_renderState, this.state.renderState);
            if (_renderState[renderStateIndex + 1]) {
                this.setState({ renderState: _renderState[renderStateIndex + 1], init: init });
            } else {
                this.setState({ init: init });
            }
        }
    }, {
        key: '_handleTrigger',
        value: function _handleTrigger() {
            var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Year';

            this.setState({ renderState: param });
        }
    }, {
        key: '_setToday',
        value: function _setToday() {
            this.setState({ init: (0, _moment2.default)().valueOf() });
        }
    }, {
        key: '_getPositionInfo',
        value: function _getPositionInfo() {
            var trigger = this.node; // 暂时找不到同好的办法获取children的dom节点

            var childrenTarget = trigger.children || [];
            var positionInfo = {};
            if (childrenTarget.length === 1) {
                positionInfo = (0, _dom.getDomOffset)(childrenTarget[0]);
            } else {
                positionInfo = (0, _dom.getDomOffset)(trigger);
            }
            return positionInfo;
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            return this.state.tmpValue;
        }
    }, {
        key: 'handleOnClose',
        value: function handleOnClose() {
            var timestamp = this.state.init;
            this.props.onClose(timestamp);
        }
        // portal是portal组件回调的参数 document元素
        // handleOnOpen(portal) {
        //     let positionInfo = this._getPositionInfo();
        //     let portalNode = portal;
        //     let datePicker = portalNode.querySelector('.mcds-datepicker');

        //     datePicker.style.top = positionInfo.top + positionInfo.height + 'px';
        //     datePicker.style.left = positionInfo.left + 'px';

        //     this.props.onOpen(portalNode);
        // }

    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
            var _props = this.props,
                pickerClassName = _props.pickerClassName,
                _props$placement = _props.placement,
                placement = _props$placement === undefined ? 'right' : _props$placement,
                error = _props.error;

            var trigg_buton = this.props.children;
            var renderState = state.renderState;
            var renderFun = this['render' + renderState];
            var renderBottom = '';
            if (state.renderState === 'Day') {
                renderBottom = _react2.default.createElement(
                    _base.DatePickerBottomFuns,
                    null,
                    _react2.default.createElement(
                        _base.DatePickerBottomFunsColumn,
                        { onClick: function onClick() {
                                _this2._setToday();
                            }, className: (0, _classnames2.default)({ hide: state.renderState !== 'Day' }) },
                        '\u4ECA\u5929'
                    )
                );
            }
            renderFun.bind(this);
            return _react2.default.createElement(
                _index.DropDownTrigger,
                { ref: 'DropDownTrigger', className: (0, _classnames2.default)('mcds-datepicker__trigger', { 'mcds-input__border': error }), target: 'body', placement: placement, synchWidth: false },
                trigg_buton,
                _react2.default.createElement(
                    _index.DropDown,
                    { className: 'mcds-datepicker__dropdown' },
                    _react2.default.createElement(
                        _base.DatePickerContainer,
                        { className: pickerClassName },
                        _react2.default.createElement(
                            _base.DatePickerHeader,
                            null,
                            _react2.default.createElement(
                                _base.DatePickerHeaderColumn,
                                { className: (0, _classnames2.default)({ selected: state.renderState === 'Year' }), onClick: function onClick() {
                                        _this2._handleTrigger('Year');
                                    } },
                                (0, _moment2.default)(state.init).year(),
                                '\u5E74'
                            ),
                            _react2.default.createElement(
                                _base.DatePickerHeaderColumn,
                                { className: (0, _classnames2.default)({ selected: state.renderState === 'Month' }), onClick: function onClick() {
                                        _this2._handleTrigger('Month');
                                    } },
                                (0, _moment2.default)(state.init).month() + 1,
                                '\u6708'
                            )
                        ),
                        renderFun(this),
                        renderBottom
                    )
                )
            );
        }
    }]);
    return DatePicker;
}(_react2.default.Component);

exports.default = DatePicker;


DatePicker.propTypes = {
    children: _propTypes2.default.any,
    // className: PropTypes.string,
    pickerClassName: _propTypes2.default.string,
    placement: _propTypes2.default.string,
    onChange: _propTypes2.default.func,
    onClose: _propTypes2.default.func,
    onOpen: _propTypes2.default.func,
    init: _propTypes2.default.oneOfType([_propTypes2.default.number]),
    error: _propTypes2.default.bool
};

DatePicker.defaultProps = {
    init: Date.parse(new Date()), // 时间戳
    // yearRange: '1990,2030', // 年份范围
    // monthRange: '3,12', // 月份范围
    // rangeSelected: false, // 范围选择
    onChange: function onChange() {},
    onClose: function onClose() {},
    onOpen: function onOpen() {}
};
module.exports = exports['default'];