'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _base = require('../_base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
    <DayCalendar
        init = {
            year:2016,
            month:1,
            day:1,
        }|| timestamp;
    />
 */
var Cell = function Cell(props) {
    return _react2.default.createElement(
        'div',
        (0, _extends3.default)({}, props, { className: (0, _classnames2.default)('mcds-datepicker__calendar-day-weeks-day', props.className) }),
        props.children
    );
};

Cell.propTypes = {
    children: _propTypes2.default.any.isRequired,
    className: _propTypes2.default.string
};

var DayCalendar = function (_React$Component) {
    (0, _inherits3.default)(DayCalendar, _React$Component);

    function DayCalendar(props) {
        (0, _classCallCheck3.default)(this, DayCalendar);

        var _this = (0, _possibleConstructorReturn3.default)(this, (DayCalendar.__proto__ || (0, _getPrototypeOf2.default)(DayCalendar)).call(this, props));

        _this.cellClick = _this.cellClick.bind(_this);
        _this._checkNow = _this._checkNow.bind(_this);
        _this._checkSelected = _this._checkSelected.bind(_this);
        _this.state = _this.getInitState(props);
        return _this;
    }

    (0, _createClass3.default)(DayCalendar, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var state = this.getInitState(nextProps);
            this.setState(state);
        }
    }, {
        key: 'getInitState',
        value: function getInitState(props) {
            var init = {};
            var selected = null;
            if (typeof props.init === 'number') {
                var _init = (0, _moment2.default)(props.init);
                init = {
                    year: _init.year(),
                    month: _init.month(),
                    day: _init.toDate().getDate()
                };
                selected = init.day;
            } else {
                init = props.init;
            }
            return { init: init, selected: selected };
        }
    }, {
        key: 'cellClick',
        value: function cellClick(selected) {
            var _this2 = this;

            var _state$init = this.state.init,
                year = _state$init.year,
                month = _state$init.month,
                _state$init$day = _state$init.day,
                day = _state$init$day === undefined ? 1 : _state$init$day;
            // console.log('start', year, month, day, selected);

            var time = void 0;
            month = parseInt(month) + 1;
            if (month < 10) {
                month = '0' + month;
            }
            time = (0, _moment2.default)([year, month].join('-'));
            // 击的部份是前一个还是后一个
            // console.log('before', year, month, day, selected);
            if (selected.type === 'next') {
                time.month(time.month() + 1);
            }
            if (selected.type === 'previous') {
                time.month(time.month() - 1);
            }

            year = time.year();
            month = time.month() + 1;
            day = selected.value;
            // console.log('after', year, month, day, selected);
            this.setState({ init: { year: year, month: month - 1, day: day }, selected: day });
            setTimeout(function () {
                _this2.props.cellChanged({ year: year, month: month, day: day });
            }, 100);
        }
    }, {
        key: '_checkSelected',
        value: function _checkSelected(selected) {
            var day = this.state.init.day;

            if (selected && selected.value === day && selected.type === 'current' && selected.value === this.state.selected) {
                return true;
            }
            return false;
        }
    }, {
        key: '_checkNow',
        value: function _checkNow(day) {
            var _state$init2 = this.state.init,
                year = _state$init2.year,
                month = _state$init2.month;

            var now = new Date().getDate();
            if (year === (0, _moment2.default)().year() && month === (0, _moment2.default)().month() && now === day.value) {
                return true;
            }
            return false;
        }
    }, {
        key: '_getDayInfo',
        value: function _getDayInfo() {
            var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;

            var dateArray = [];
            // 初始化moment对象
            var _state$init3 = state.init,
                year = _state$init3.year,
                month = _state$init3.month;

            var curMonth = (0, _moment2.default)().year(year).month(month);
            // console.log("当前月", curMonth.format('YYYY MM'));
            var preMonth = (0, _moment2.default)().year(year).month(month - 1);
            var preMonth_days = preMonth.daysInMonth();
            var curMonth_days = curMonth.daysInMonth();
            var curFirstDay = curMonth.date(1).day(); // 获取当前月第一天的星期数  1-7 7
            var curLastDay = curMonth.date(curMonth_days).day(); // 获取当前月最后一天星期几 1-7

            var preNeed = curFirstDay === 0 ? 6 : curFirstDay - 1;
            var nextNeed = curLastDay === 0 ? 0 : 7 - curLastDay;
            for (var i = 0; i < preNeed; i++) {
                var v = preMonth_days - preNeed + 1 + i;
                dateArray.push({ type: 'previous', value: v });
            }
            for (var _i = 0; _i < curMonth_days; _i++) {
                var _v2 = _i + 1;
                dateArray.push({ type: 'current', value: _v2 });
            }
            for (var _i2 = 0; _i2 < nextNeed; _i2++) {
                var _v3 = _i2 + 1;
                dateArray.push({ type: 'next', value: _v3 });
            }
            return dateArray;
        }
    }, {
        key: 'renderNames',
        value: function renderNames() {
            var names = _lodash2.default.map(_base.langs.weeks, function (v, i) {
                return _react2.default.createElement(
                    'div',
                    { key: i, className: 'mcds-datepicker__calendar-day-name' },
                    v
                );
            });
            return names;
        }
    }, {
        key: 'renderWeeks',
        value: function renderWeeks() {
            var _this3 = this;

            var days = this._getDayInfo();
            var arrs = [];
            var component = [];
            // 每七天分为一组week
            days.forEach(function (v, index, _days) {
                if (index % 7 === 0) {
                    var _week = [];
                    for (var i = index; i < index + 7; i++) {
                        _week.push(_days[i]);
                    }
                    arrs.push(_week);
                }
            });
            arrs.forEach(function (_week, index) {
                var cells = _lodash2.default.map(_week, function (_v, _index) {
                    return _react2.default.createElement(
                        Cell,
                        {
                            key: _index,
                            className: (0, _classnames2.default)(_v.type, { now: _this3._checkNow(_v), selected: _this3._checkSelected(_v) }),
                            onClick: function onClick() {
                                return _this3.cellClick(_v);
                            } },
                        _v.value
                    );
                });
                component.push(_react2.default.createElement(
                    'div',
                    { key: index, className: 'mcds-datepicker__calendar-day-weeks' },
                    cells
                ));
            });
            return component;
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _base.DatePickerDayCalendar,
                null,
                _react2.default.createElement(
                    'div',
                    { className: 'mcds-datepicker__calendar-day-names' },
                    this.renderNames()
                ),
                this.renderWeeks()
            );
        }
    }]);
    return DayCalendar;
}(_react2.default.Component);

exports.default = DayCalendar;


DayCalendar.propTypes = {
    children: _propTypes2.default.any,
    className: _propTypes2.default.string,
    cellChanged: _propTypes2.default.func,
    init: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number])
};

DayCalendar.defaultProps = {
    init: Date.parse(new Date()),
    cellChanged: function cellChanged() {}
};
module.exports = exports['default'];