'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _portal = require('../../../../base-components/portal');

var _portal2 = _interopRequireDefault(_portal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
    提供参数{
        isActive,是否显示的标示
        dismissAfter,定时隐藏,需要配合onDismiss回调方法使用
        activeClassName,成功时候的样式名,
        theme,主题色['base,info,success,warning,error'],
        closed:true,false 是否显示右侧关闭按钮
    }
 */
var Notification = function (_Component) {
    (0, _inherits3.default)(Notification, _Component);

    function Notification(props) {
        (0, _classCallCheck3.default)(this, Notification);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Notification.__proto__ || (0, _getPrototypeOf2.default)(Notification)).call(this, props));

        _this.getBarStyle = _this.getBarStyle.bind(_this);
        _this.getActionStyle = _this.getActionStyle.bind(_this);
        _this.handleClosedClick = _this.handleClosedClick.bind(_this);
        _this.getTheme = _this.getTheme.bind(_this);

        if (props.onDismiss && props.isActive) {
            _this.dismissTimeout = setTimeout(props.onDismiss, props.dismissAfter);
        }
        return _this;
    }

    (0, _createClass3.default)(Notification, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.dismissAfter === false) {
                return;
            }

            if (!{}.hasOwnProperty.call(nextProps, 'isLast')) {
                clearTimeout(this.dismissTimeout);
            }

            if (nextProps.onDismiss) {
                if (nextProps.isActive && !this.props.isActive || nextProps.dismissAfter && this.props.dismissAfter === false) {
                    this.dismissTimeout = setTimeout(nextProps.onDismiss, nextProps.dismissAfter);
                }
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.props.dismissAfter) {
                clearTimeout(this.dismissTimeout);
            }
        }
    }, {
        key: 'getBarStyle',
        value: function getBarStyle() {
            if (this.props.style === false) {
                return {};
            }

            var _props = this.props,
                isActive = _props.isActive,
                barStyle = _props.barStyle,
                activeBarStyle = _props.activeBarStyle;


            var baseStyle = {};

            return isActive ? (0, _assign2.default)({}, baseStyle, barStyle, activeBarStyle) : (0, _assign2.default)({}, baseStyle, barStyle);
        }
    }, {
        key: 'getTheme',
        value: function getTheme() {
            return 'mcds-notification__theme-' + this.props.theme;
        }
    }, {
        key: 'getActionStyle',
        value: function getActionStyle() {
            return this.props.style !== false ? (0, _assign2.default)({}, {}, this.props.actionStyle) : {};
        }
    }, {
        key: 'handleClosedClick',
        value: function handleClosedClick() {
            if (this.props.onDismiss && this.props.isActive) {
                this.props.onDismiss();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var className = 'mcds-notification ' + this.getTheme();
            var closed = '';
            if (this.props.isActive) {
                className += ' mcds-notification__active ' + this.props.activeClassName;
            }
            if (this.props.className) {
                className += ' ' + this.props.className;
            }
            if (this.props.closed) {
                closed = _react2.default.createElement('span', { onClick: this.handleClosedClick, className: 'mcds-notification__close mcds-icon__close-line-20' });
            }
            return _react2.default.createElement(
                _portal2.default,
                { isOpened: true },
                _react2.default.createElement(
                    'div',
                    { className: className, style: this.getBarStyle() },
                    _react2.default.createElement(
                        'div',
                        { className: 'mcds-notification__wrapper' },
                        _react2.default.createElement(
                            'div',
                            { className: 'mcds-notification__message' },
                            this.props.message
                        ),
                        closed
                    )
                )
            );
        }
    }]);
    return Notification;
}(_react.Component);

Notification.propTypes = {
    message: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]).isRequired,
    style: _propTypes2.default.bool,
    actionStyle: _propTypes2.default.object,
    barStyle: _propTypes2.default.object,
    activeBarStyle: _propTypes2.default.object,
    dismissAfter: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),
    closed: _propTypes2.default.bool,
    theme: _propTypes2.default.oneOf(['info', 'error', 'base', 'warning', 'success']),
    onDismiss: _propTypes2.default.func,
    className: _propTypes2.default.string,
    activeClassName: _propTypes2.default.string,
    isActive: _propTypes2.default.bool
};

Notification.defaultProps = {
    isActive: false,
    dismissAfter: 3000,
    activeClassName: 'notification-bar-active',
    theme: 'base',
    closed: true
};

exports.default = Notification;
module.exports = exports['default'];