'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _notification = require('../base/notification');

var _notification2 = _interopRequireDefault(_notification);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var StackedNotification = function (_Component) {
    (0, _inherits3.default)(StackedNotification, _Component);

    function StackedNotification(props) {
        (0, _classCallCheck3.default)(this, StackedNotification);

        var _this = (0, _possibleConstructorReturn3.default)(this, (StackedNotification.__proto__ || (0, _getPrototypeOf2.default)(StackedNotification)).call(this, props));

        _this.state = {
            isActive: false
        };

        return _this;
    }

    (0, _createClass3.default)(StackedNotification, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            setTimeout(this.setState.bind(this, {
                isActive: true
            }), 10);

            this.dismiss(this.props.dismissAfter);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.dismissAfter !== this.props.dismissAfter) {
                this.dismiss(nextProps.dismissAfter);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            clearTimeout(this.dismissTimeout);
        }
    }, {
        key: 'dismiss',
        value: function dismiss(dismissAfter) {
            if (dismissAfter === false) {
                return false;
            }

            // this.dismissTimeout = setTimeout(this.setState.bind(this, {
            //     isActive: false
            // }), dismissAfter);
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_notification2.default, (0, _extends3.default)({}, this.props, {
                isActive: this.state.isActive }));
        }
    }]);
    return StackedNotification;
}(_react.Component);

StackedNotification.propTypes = {
    dismissAfter: _propTypes2.default.number
};

exports.default = StackedNotification;
module.exports = exports['default'];