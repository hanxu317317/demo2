'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _form = require('../form');

var _dropdown = require('../dropdown');

var _buttonIcon = require('../button-icon');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// window.moment = moment;


var TimePicker = function (_React$Component) {
    (0, _inherits3.default)(TimePicker, _React$Component);

    function TimePicker(props) {
        (0, _classCallCheck3.default)(this, TimePicker);
        var init = props.init;

        var _this = (0, _possibleConstructorReturn3.default)(this, (TimePicker.__proto__ || (0, _getPrototypeOf2.default)(TimePicker)).call(this, props));

        _this.state = {
            init: init, // 初始定义的时间
            momentTime: (0, _moment2.default)(init), // 转换后的moment对象
            showType: 'Summary', // 显示的阶段 Summary, Minute, Hours,
            active: false,
            display: 'none', // 为了让dropdown隐藏的时候不占位
            part: '' // 模拟input中 时间部份 显示被选中的部份 hour||minute
        };
        _this.input = null;
        _this.close = _this.close.bind(_this);
        _this.show = _this.show.bind(_this);
        _this.getValue = _this.getValue.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(TimePicker, [{
        key: 'show',
        value: function show() {
            var _this2 = this;

            this.setState({ display: 'block' });
            setTimeout(function () {
                _this2.setState({ active: true });
            }, 300);
        }
    }, {
        key: 'close',
        value: function close() {
            var _this3 = this;

            this.setState({ active: false, part: '' });
            setTimeout(function () {
                _this3.setState({ display: 'none' });
            }, 300);
        }
    }, {
        key: 'handleHourCellClick',
        value: function handleHourCellClick(num) {
            this.setHour(null, num);
            this.setShowType('Summary');
        }
    }, {
        key: 'handleMinutesCellClick',
        value: function handleMinutesCellClick(num) {
            this.setMinute(null, num);
            this.setShowType('Summary');
        }
    }, {
        key: 'handleInputPartClick',
        value: function handleInputPartClick(part) {
            this.setState({ part: part });
        }
    }, {
        key: 'handleOnChange',
        value: function handleOnChange(v) {
            this.props.onChange(v);
        }
        /**
         * 设置小时数
         * @param {[type]} type [up||down||null]
         * @param {[type]} num  [null||null||num]
         */

    }, {
        key: 'setHour',
        value: function setHour(type, num) {
            var _this4 = this;

            var momentTime = this.state.momentTime;
            var hour = momentTime.hour();

            if (type === 'up') {
                hour += 1;
            } else if (type === 'down') {
                hour -= 1;
            } else {
                hour = num;
            }

            hour = hour > 24 ? 1 : hour;

            momentTime.hour(hour);

            this.setState({
                momentTime: momentTime
            });
            this.handleOnChange(momentTime.format('x'));
            setTimeout(function () {
                _this4.handleInputPartClick('hour');
            }, 1);
        }
    }, {
        key: 'setShowType',
        value: function setShowType(type) {
            var part = this.state.part;

            if (type === 'Hours') {
                if (part !== 'hour') {
                    this.handleInputPartClick('hour');
                }
            }
            if (type === 'Minutes') {
                if (part !== 'minute') {
                    this.handleInputPartClick('minute');
                }
            }
            this.setState({
                showType: type
            });
        }
    }, {
        key: 'setMinute',
        value: function setMinute(type, num) {
            var _this5 = this;

            var momentTime = this.state.momentTime;
            var minute = momentTime.minute();
            if (type === 'up') {
                minute += 1;
            } else if (type === 'down') {
                minute -= 1;
            } else {
                minute = num;
            }
            minute = minute > 60 ? 1 : minute;

            momentTime.minute(minute);
            this.setState({
                momentTime: momentTime
            });
            this.handleOnChange(momentTime.format('x'));
            setTimeout(function () {
                _this5.handleInputPartClick('minute');
            }, 1);
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            var momentTime = this.state.momentTime;

            return momentTime.format('x');
        }
    }, {
        key: 'renderSummary',
        value: function renderSummary() {
            var momentTime = this.state.momentTime;

            var hour = void 0;
            var minute = void 0;
            hour = momentTime.hour();
            minute = momentTime.minute();

            return _react2.default.createElement(
                'div',
                { className: 'mcds-timepicker__wrap mcds-layout__column' },
                _react2.default.createElement(
                    'div',
                    { className: 'left' },
                    _react2.default.createElement(_buttonIcon.ButtonSmallIcon, {
                        onClick: this.setHour.bind(this, 'up'),
                        className: 'mcds-timepicker__button mcds-timepicker__button-top mcds-m__r-44 mcds-m__t-15', icon: 'mcds-icon__rotate-180 mcds-icon__triangle-solid-14' }),
                    _react2.default.createElement(_form.Input, {
                        ref: 'hours',
                        readOnly: 'readonly',
                        value: hour < 10 ? '0' + hour : hour,
                        className: 'mcds-m__r-30 mcds-m__t-12 mcds-m__b-12',
                        onClick: this.setShowType.bind(this, 'Hours') }),
                    _react2.default.createElement(_buttonIcon.ButtonSmallIcon, {
                        onClick: this.setHour.bind(this, 'down'),
                        className: 'mcds-timepicker__button mcds-timepicker__button-bottom mcds-m__r-44', icon: 'mcds-icon__triangle-solid-14' })
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'middle' },
                    ':'
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'right' },
                    _react2.default.createElement(_buttonIcon.ButtonSmallIcon, {
                        onClick: this.setMinute.bind(this, 'up'),
                        className: 'mcds-timepicker__button mcds-timepicker__button-top mcds-m__l-44 mcds-m__t-15', icon: 'mcds-icon__triangle-solid-14 mcds-icon__rotate-180' }),
                    _react2.default.createElement(_form.Input, {
                        ref: 'minutes',
                        readOnly: 'readonly',
                        value: minute < 10 ? '0' + minute : minute,
                        className: 'mcds-m__l-30 mcds-m__t-12 mcds-m__b-12',
                        onClick: this.setShowType.bind(this, 'Minutes') }),
                    _react2.default.createElement(_buttonIcon.ButtonSmallIcon, {
                        onClick: this.setMinute.bind(this, 'down'),
                        className: 'mcds-timepicker__button mcds-timepicker__button-bottom mcds-m__l-44', icon: 'mcds-icon__triangle-solid-14' })
                )
            );
        }
    }, {
        key: 'renderHours',
        value: function renderHours() {
            var _this6 = this;

            var hours = [];
            var now = this.state.momentTime.hour();

            for (var i = 0; i < 24; i++) {
                var tmp = i + 1;
                if (tmp < 10) {
                    tmp = '0' + tmp;
                } else {
                    tmp += '';
                }
                hours.push(tmp);
            }
            var Hours = hours.map(function (v, i) {
                return _react2.default.createElement(
                    HouerCell,
                    { key: i, className: (0, _classnames2.default)({ selected: now === parseInt(v) }), onClick: _this6.handleHourCellClick.bind(_this6, v) },
                    v
                );
            });
            return _react2.default.createElement(
                'div',
                { className: 'mcds-timepicker__hours' },
                Hours
            );
        }
    }, {
        key: 'renderMinutes',
        value: function renderMinutes() {
            var _this7 = this;

            var minutes = [];
            var now = this.state.momentTime.minute();
            for (var i = 0; i < 60; i += 5) {
                var tmp = i;
                if (tmp < 10) {
                    tmp = '0' + tmp;
                } else {
                    tmp += '';
                }
                minutes.push(tmp);
            }
            var MinuteCells = minutes.map(function (v, i) {
                return _react2.default.createElement(
                    MinuteCell,
                    { key: i, className: (0, _classnames2.default)({ selected: now === parseInt(v) }), onClick: _this7.handleMinutesCellClick.bind(_this7, v) },
                    v
                );
            });
            return _react2.default.createElement(
                'div',
                { className: 'mcds-timepicker__minutes' },
                MinuteCells
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _this8 = this;

            var _props = this.props,
                className = _props.className,
                placement = _props.placement,
                target = _props.target,
                error = _props.error;
            var _state = this.state,
                showType = _state.showType,
                momentTime = _state.momentTime,
                part = _state.part;

            var inputHourValue = momentTime.format('HH');
            var inputMinuteValue = momentTime.format('mm');
            return _react2.default.createElement(
                _dropdown.DropDownTrigger,
                {
                    ref: 'trigger',
                    onOpen: this.show.bind(this),
                    synchWidth: false,
                    placement: placement,
                    target: target,
                    className: (0, _classnames2.default)('mcds-timepicker', className),
                    closeOnOutsideClick: true,
                    onClose: function onClose() {
                        _this8.setState({ active: false, part: '' });
                    } },
                _react2.default.createElement(
                    'div',
                    { className: (0, _classnames2.default)('mcds-input__container mcds-timepicker__context', { 'mcds-element__border': error }) },
                    _react2.default.createElement(
                        'div',
                        { className: 'mcds-form__control' },
                        _react2.default.createElement(
                            'div',
                            {
                                className: (0, _classnames2.default)('mcds-timepicker__input', {
                                    focus: this.state.active
                                }) },
                            _react2.default.createElement(
                                'span',
                                {
                                    onClick: this.handleInputPartClick.bind(this, 'hour'),
                                    className: (0, _classnames2.default)('mcds-timepicker__input-hour', { active: part === 'hour' }) },
                                inputHourValue
                            ),
                            _react2.default.createElement(
                                'span',
                                { className: 'mcds-m__l-5 mcds-m__r-5' },
                                ':'
                            ),
                            _react2.default.createElement(
                                'span',
                                {
                                    onClick: this.handleInputPartClick.bind(this, 'minute'),
                                    className: (0, _classnames2.default)('mcds-timepicker__input-minute', { active: part === 'minute' }) },
                                inputMinuteValue
                            )
                        ),
                        _react2.default.createElement('span', { className: 'mcds-icon__time-line-20 mcds-search__right' })
                    )
                ),
                _react2.default.createElement(
                    _dropdown.DropDown,
                    { className: 'mcds-timepicker__dropdown' },
                    this['render' + showType]()
                )
            );
        }
    }]);
    return TimePicker;
}(_react2.default.Component); /**
                               * https://www.lightningdesignsystem.com/components/datepickers/
                               * 时间选择器,时间段选择器。时间选择器和日期选择器应该是分开的,便于维护,但是两个东西应该是可以组合起来使用的组件
                               */

TimePicker.defaultProps = {
    callback: function callback(val) {
        return val;
    },
    init: Date.parse(new Date())
};


TimePicker.propTypes = {
    init: _propTypes2.default.number,
    className: _propTypes2.default.string,
    target: _propTypes2.default.string,
    onChange: _propTypes2.default.func,
    placement: _propTypes2.default.string,
    error: _propTypes2.default.bool
};
TimePicker.defaultProps = {
    placement: 'bottom-right',
    target: 'body',
    onChange: function onChange() {}
};
exports.default = {
    TimePicker: TimePicker
};


var HouerCell = function HouerCell(props) {
    return _react2.default.createElement(
        'div',
        (0, _extends3.default)({}, props, { className: (0, _classnames2.default)('mcds-timepicker__hours-hour', props.className) }),
        props.children
    );
};
HouerCell.propTypes = {
    className: _propTypes2.default.string,
    children: _propTypes2.default.any
};
var MinuteCell = function MinuteCell(props) {
    return _react2.default.createElement(
        'div',
        (0, _extends3.default)({}, props, { className: (0, _classnames2.default)('mcds-timepicker__minutes-minute', props.className) }),
        props.children
    );
};
MinuteCell.propTypes = {
    className: _propTypes2.default.string,
    children: _propTypes2.default.any
};
module.exports = exports['default'];