'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _dropdown = require('../../../dropdown');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MenuWidth = 130;
// 每级菜单左||右偏移量


// import {Button} from '../../../buttons/index';
// import {Menu, MenuList, MenuItem} from '../base/index';
var MenuOffsetLeft = 12;
// 每级菜单上偏移
var MenuOffsetTop = 32;

var buildStyle = function buildStyle() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MenuWidth;

    var marginTop = 0;
    var marginLeft = 0;
    var left = 0;

    path.forEach(function (v) {
        // console.log('v', v);
        marginTop += v.index * MenuOffsetTop + 5 - v.scrollTop;
        switch (v.direction) {
            case 'left':
                marginLeft += MenuOffsetLeft;
                left -= MenuWidth;
                break;
            case 'right':
                marginLeft -= MenuOffsetLeft;
                left += MenuWidth;
                break;
            default:
                marginLeft -= MenuOffsetLeft;
                left += MenuWidth;
        }
    });

    return {
        width: width,
        marginTop: marginTop,
        marginLeft: marginLeft,
        left: left,
        position: 'absolute'
    };
};

var Path = {
    addPath: function addPath() {
        var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var index = arguments[1];
        var level = arguments[2];
        var scrollTop = arguments[3];

        path.push({ level: level, index: index, scrollTop: scrollTop });
        return path;
    },
    // 退回到同一层的路径的上一个节点
    back: function back() {
        var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var index = arguments[1];
        var level = arguments[2];

        var start = 0;
        var end = void 0;
        for (var i = 0; i < path.length; i++) {
            if (path[i].level === level) {
                end = i;
            }
        }
        var newPath = path.slice(start, end);
        return newPath;
    }
};

var getCoordinates = function getCoordinates(visualPos) {
    // 四个顶点的坐标
    var result = {
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0,
        x3: 0,
        y3: 0,
        x4: 0,
        y4: 0
    };
    result.x1 = visualPos.left;
    result.y1 = visualPos.top;

    result.x2 = visualPos.left + visualPos.width;
    result.y2 = visualPos.top;

    result.x3 = visualPos.left + visualPos.width;
    result.y3 = visualPos.top + visualPos.height;

    result.x4 = visualPos.left;
    result.y4 = visualPos.top + visualPos.height;
    return result;
};

// checked有二种 true false;

var MultiSelect = function (_React$Component) {
    (0, _inherits3.default)(MultiSelect, _React$Component);

    function MultiSelect(props) {
        (0, _classCallCheck3.default)(this, MultiSelect);

        var _this = (0, _possibleConstructorReturn3.default)(this, (MultiSelect.__proto__ || (0, _getPrototypeOf2.default)(MultiSelect)).call(this, props));

        var data = _this.buildDate(props.data, props.defaultValue);
        _this.state = {
            data: data,
            select: props.defaultValue,
            path: [] // 交互中展示的路径
        };
        _this.onMouseClick = _this.onMouseClick.bind(_this);
        _this._onChange = _this._onChange.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(MultiSelect, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            document.addEventListener('scroll', this._onScroll.bind(this), true);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(props) {
            var data = this.buildDate(props.data, props.defaultValue);
            this.setState({ data: data, defaultValue: props.defaultValue });
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            document.removeEventListener('scroll', this._onScroll.bind(this));
        }
    }, {
        key: '_onScroll',
        value: function _onScroll() {
            if (this.refs.menus) {
                this.buildMenu();
            }
            return false;
        }
        // 构建级联关系数据

    }, {
        key: 'buildDate',
        value: function buildDate(originDate, select) {
            var data = _lodash2.default.cloneDeep(originDate);
            var loop = function loop(_data, _p) {
                _data.forEach(function (d) {
                    d.parent = _p;
                    d.checked = select && select.indexOf ? select.indexOf(d.value) > -1 : false;
                    d.all = true; // 是否全选
                    if (d.children) {
                        loop(d.children, d);
                    }
                });
            };
            loop(data, null);
            this.buildInitCheck(data);
            return data;
        }
    }, {
        key: 'checkAllChildren',
        value: function checkAllChildren(data, checked) {
            var loop = function loop(_data) {
                _data.forEach(function (_d) {
                    _d.checked = !!checked;
                    _d.all = !!checked ? true : false;
                    if (_d.children) {
                        loop(_d.children);
                    }
                });
            };
            if (data.children) {
                loop(data.children);
            }
        }
    }, {
        key: 'buildInitCheck',
        value: function buildInitCheck(data) {
            var _this2 = this;

            var loop = function loop(_data) {
                _data.forEach(function (_d) {
                    if (_d.checked) {
                        _this2.checkAllChildren(_d, true);
                    } else if (_d.children) {
                        loop(_d.children);
                    }
                });
            };
            loop(data);
            this.syncCheckedToParent(data);
        }
    }, {
        key: 'syncCheckedToParent',
        value: function syncCheckedToParent(data) {
            var _this3 = this;

            var loop = function loop(_data) {
                _data.forEach(function (_d) {
                    if (_d.children) {
                        loop(_d.children);
                    } else {
                        _this3.checkParent(_d);
                    }
                });
            };
            loop(data);
        }
    }, {
        key: 'checkParent',
        value: function checkParent(data) {
            if (data.parent) {
                var parentChildren = data.parent.children;
                var parentChildCheckeds = parentChildren.filter(function (v) {
                    return v.checked === true;
                });
                if (parentChildCheckeds.length === parentChildren.length) {
                    data.parent.all = true;
                    data.parent.checked = true;
                } else if (parentChildCheckeds.length === 0) {
                    data.parent.all = false;
                    data.parent.checked = false;
                } else {
                    data.parent.all = false;
                    data.parent.checked = true;
                }
                this.checkParent(data.parent);
            }
        }
    }, {
        key: 'onMouseClick',
        value: function onMouseClick(e, item) {
            e.stopPropagation();
            e.preventDefault();
            item.checked = !item.checked;
            item.all = item.checked ? true : false;
            this.checkAllChildren(item, item.checked);
            this.checkParent(item);
            this.setState({ data: this.state.data });
            setTimeout(this._onChange.bind(this), 1);
        }
    }, {
        key: 'handleOnMouseOver',
        value: function handleOnMouseOver(item, pathIndex, level, e) {
            var path = this.state.path;

            var ulNode = e.currentTarget.parentElement;
            path = Path.back(path, pathIndex, level);
            path = Path.addPath(path, pathIndex, level, ulNode.scrollTop);

            this.setState({ path: path });
        }
    }, {
        key: 'buildMenu',
        value: function buildMenu() {
            var _this4 = this;

            var arrayDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.data;
            var path = this.state.path;


            var menu = function menu(data, level, style) {
                var items = data.map(function (_data, index) {
                    var iconLeft = void 0;
                    if (_data.checked === true) {
                        iconLeft = _data.all ? CheckBox : CheckBoxPart;
                    } else {
                        iconLeft = CheckBoxPlace;
                    }
                    return _react2.default.createElement(_dropdown.DropDownItem, {
                        iconLeft: iconLeft,
                        iconRight: _data.children ? TableIconRight : null,
                        onClick: function onClick(e) {
                            _this4.onMouseClick(e, _data);
                        },
                        onMouseOver: _this4.handleOnMouseOver.bind(_this4, _data, index, level),
                        key: index,
                        children: _data.name });
                });
                return _react2.default.createElement(
                    _dropdown.DropDown,
                    { className: 'mcds-select__single open', key: level, style: style },
                    _react2.default.createElement(
                        _dropdown.DropDownList,
                        null,
                        items
                    )
                );
            };
            var menus = [menu(arrayDate, 0)];
            path.forEach(function (v, index) {
                var hierarchyArray = _lodash2.default.clone(path).slice(0, index + 1);
                var findChildren = function findChildren(data, array) {
                    var result = data;
                    array.forEach(function (p) {
                        result = result[p.index].children;
                    });
                    return result;
                };

                var children = findChildren(arrayDate, hierarchyArray);
                if (children) {
                    var newDir = _this4._getNewDir(index, hierarchyArray);
                    hierarchyArray[index].direction = newDir;
                    var menuNode = menu(children, index + 1, buildStyle(hierarchyArray));
                    menus.push(menuNode);
                }
            });
            return menus;
        }
    }, {
        key: '_getNewDir',
        value: function _getNewDir(index, hierarchyArray) {
            var placement = this.props.placement;

            var body = document.body;
            var menuEle = this.refs.menu;
            var bodyRect = body.getBoundingClientRect();
            var menuRect = menuEle.getBoundingClientRect();
            var getMenuPos = getCoordinates(menuRect);
            var menuChildren = menuEle.children[index];
            var menuChildrenRect = menuChildren.getBoundingClientRect();
            var getPos = getCoordinates(menuChildrenRect);
            var newDir = placement;
            if (index === 0) {
                if (placement === 'right') {
                    if (getMenuPos.x2 + MenuWidth - MenuOffsetLeft > bodyRect.width) {
                        newDir = 'left';
                    }
                } else if (placement === 'left') {
                    if (getMenuPos.x1 - MenuWidth + MenuOffsetLeft < 0) {
                        newDir = 'right';
                    }
                }
            } else if (hierarchyArray[index - 1].direction === 'right') {
                if (getPos.x2 + MenuWidth - MenuOffsetLeft > bodyRect.width) {
                    newDir = 'left';
                } else {
                    newDir = 'right';
                }
            } else if (hierarchyArray[index - 1].direction === 'left') {
                if (getPos.x1 - MenuWidth + MenuOffsetLeft < 0) {
                    newDir = 'right';
                } else {
                    newDir = 'left';
                }
            }
            return newDir;
        }
    }, {
        key: '_onChange',
        value: function _onChange() {
            var selectedArray = [];
            // 遍历最底层孩子节点.找到 checked= true的值
            var loop = function loop(_data) {
                _data.forEach(function (v) {
                    if (v.children) {
                        loop(v.children);
                    } else if (v.checked === true) {
                        selectedArray.push(v.value);
                    }
                });
            };
            loop(this.state.data, selectedArray);
            this.props.onChange(selectedArray);
        }
    }, {
        key: '_cancle',
        value: function _cancle() {
            this.props.closePortal();
        }
    }, {
        key: 'render',
        value: function render() {
            var menu = this.buildMenu();
            var className = this.props.className;

            return _react2.default.createElement('div', { className: (0, _classnames2.default)('mcds-select__root', className), children: menu, ref: 'menu' });
        }
    }]);
    return MultiSelect;
}(_react2.default.Component);

exports.default = MultiSelect;

MultiSelect.propTypes = {
    data: _propTypes2.default.array.isRequired,
    defaultValue: _propTypes2.default.array,
    onChange: _propTypes2.default.func,
    closePortal: _propTypes2.default.func,
    className: _propTypes2.default.string,
    placement: _propTypes2.default.string
};

MultiSelect.defaultProps = {
    onChange: function onChange() {},
    data: [],
    defaultValue: []
};

var CheckBox = _react2.default.createElement(
    'span',
    { className: 'mcds-icon__container mcds-icon__container-14 mcds-select__multi-checkbox mcds-m__r-6 mcds-m__l-3' },
    _react2.default.createElement('span', { className: 'mcds-icon__check-12 mcds-dropdown__checkbox' })
);
var CheckBoxPart = _react2.default.createElement(
    'span',
    { className: 'mcds-icon__container mcds-icon__container-14 mcds-select__multi-checkbox mcds-m__r-6 mcds-m__l-3 ' },
    _react2.default.createElement('span', { className: 'mcds-icon__subtraction-13 mcds-dropdown__checkbox' })
);
var CheckBoxPlace = _react2.default.createElement(
    'span',
    { className: 'mcds-icon__container mcds-icon__container-14 mcds-select__multi-checkbox mcds-select__multi-checkbox-place mcds-m__r-6 mcds-m__l-3' },
    _react2.default.createElement('span', { className: 'mcds-icon__checked mcds-dropdown__checkbox mcds-dropdown__checkbox-place' })
);
var TableIconRight = _react2.default.createElement('span', { className: 'mcds-icon__right mcds-icon__triangle-solid-14 mcds-icon__rotate-270' });
module.exports = exports['default'];