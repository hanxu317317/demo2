'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _portal = require('../../../../base-components/portal');

var _portal2 = _interopRequireDefault(_portal);

var _singleSelect = require('./single-select');

var _singleSelect2 = _interopRequireDefault(_singleSelect);

var _multiSelect = require('./multi-select');

var _multiSelect2 = _interopRequireDefault(_multiSelect);

var _dom = require('../../../../utils/dom');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 这个组件,集合了多选与单选
var MenuWidth = 130;
// 弹出菜单宽度，因为弹出之前是无法获取的，向左弹出需要计算宽度，在这里定义一下

var Cascader = function (_React$Component) {
    (0, _inherits3.default)(Cascader, _React$Component);

    function Cascader(props) {
        (0, _classCallCheck3.default)(this, Cascader);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Cascader.__proto__ || (0, _getPrototypeOf2.default)(Cascader)).call(this, props));

        _this.state = {
            defaultValue: props.defaultValue,
            placement: props.placement
        };
        _this.portalNode = null;
        _this._setPosition = _this._setPosition.bind(_this);
        _this._getPositionInfo = _this._getPositionInfo.bind(_this);
        _this._calculatePortalPosition = _this._calculatePortalPosition.bind(_this);
        _this.handleOnChange = _this.handleOnChange.bind(_this);
        _this.getValue = _this.getValue.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Cascader, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            document.addEventListener('scroll', this.onScroll.bind(this), true);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (!_lodash2.default.isUndefined(nextProps.defaultValue)) {
                this.setState({ defaultValue: nextProps.defaultValue });
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            document.removeEventListener('scroll', this.onScroll.bind(this));
        }
    }, {
        key: 'onScroll',
        value: function onScroll() {
            // 43-48是问题代码
            // if (onScrollTimer) return ;
            // onScrollTimer = true;
            // setTimeout(() => {
            //     this._setPosition(this.refs.portal.node);
            //     onScrollTimer = false;
            // }, scrollWaitTime)
            var portal = this.refs.portal;
            if (portal && portal.node) {
                this._setPosition(this.refs.portal.node);
            }
        }
        // 设置portal中显示div的top,left

    }, {
        key: '_setPosition',
        value: function _setPosition(portalNode) {

            if (!portalNode) {
                return;
            }
            var triggerInfo = this._getPositionInfo(); // 获取位置信息
            var portal = portalNode; // portal 在root节点的元素
            var menu = portal.querySelector('.mcds-select__root'); // 获取到的portal中第一个menu;
            var menuInfo = (0, _dom.getDomOffset)(menu);

            var _calculatePortalPosit = this._calculatePortalPosition(triggerInfo, menuInfo),
                left = _calculatePortalPosit.left,
                top = _calculatePortalPosit.top;

            menu.style.left = left + 'px';
            menu.style.top = top + 5 + 'px';
            menu.style.position = 'fixed';
            menu.style.zIndex = 9999;
        }

        // 获取触发元素的按钮位置信息 {left,top,width,height}

    }, {
        key: '_getPositionInfo',
        value: function _getPositionInfo() {
            var trigger = this.node; // 暂时找不到同好的办法获取children的dom节点
            var childrenTarget = trigger.children || [];
            var positionInfo = {};
            if (childrenTarget.length === 1) {
                positionInfo = (0, _dom.getDomOffset)(childrenTarget[0]);
            } else {
                positionInfo = (0, _dom.getDomOffset)(trigger);
            }
            return positionInfo;
        }
    }, {
        key: '_getNewPlacement',
        value: function _getNewPlacement(targetInfo) {
            var body = document.body;
            var bodyRect = body.getBoundingClientRect();
            var placement = this.props.placement;

            if (placement === 'right') {
                if (targetInfo.left + MenuWidth > bodyRect.width) {
                    placement = 'left';
                }
            } else if (targetInfo.left + targetInfo.width - MenuWidth < 0) {
                placement = 'right';
            }
            return placement;
        }
        /**
         * [计算出portal中显示div的 top与 left]
         * @param  {[obj]} targetInfo  [target的位置信息]
         * @param  {[obj]} menuInfo    [portal元素的尺寸]
         * @return {[obj]}             [{left,top}]
         */

    }, {
        key: '_calculatePortalPosition',
        value: function _calculatePortalPosition(targetInfo) {
            var result = {};

            var placement = this._getNewPlacement(targetInfo);
            this.setState({
                placement: placement
            });
            switch (placement) {
                case 'right':
                    result.top = targetInfo.top + targetInfo.height;
                    result.left = targetInfo.left;
                    break;
                case 'left':
                    result.top = targetInfo.top + targetInfo.height;
                    result.left = targetInfo.left + targetInfo.width - MenuWidth;
                    break;
                default:
                    console.warn('no placement please check props.placement');
            }
            return result;
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            return this.state.defaultValue;
        }
        // 用来接收单选或者多选的回调,并且返回给父类组件

    }, {
        key: 'handleOnChange',
        value: function handleOnChange(param) {
            if (this.props.type === 'single') {
                var newParam = _lodash2.default.clone(param);
                // 单选的param是每一层的数据的value数组
                this.setState({ defaultValue: newParam.reverse()[0] });
            } else {
                this.setState({ defaultValue: param });
            }

            this.props.onChange(param);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                children = _props.children,
                triggerBy = _props.triggerBy,
                data = _props.data,
                type = _props.type,
                className = _props.className,
                error = _props.error;
            var _state = this.state,
                placement = _state.placement,
                defaultValue = _state.defaultValue;

            var Trigger = _react2.default.cloneElement(children);
            var select = void 0;
            if (type === 'single') {
                select = _react2.default.createElement(_singleSelect2.default, { data: data, defaultValue: defaultValue, className: className, onChange: this.handleOnChange, placement: placement });
            } else {
                select = _react2.default.createElement(_multiSelect2.default, { data: data, defaultValue: defaultValue, className: className, onChange: this.handleOnChange, placement: placement });
            }
            return _react2.default.createElement(
                _portal2.default,
                {
                    ref: 'portal',
                    openByClickOn: triggerBy === 'click' ? _react2.default.createElement(
                        'div',
                        { ref: function ref(node) {
                                return _this2.node = node;
                            }, className: (0, _classnames2.default)({ 'mcds-element__border': error }) },
                        Trigger
                    ) : null,
                    closeOnOutsideClick: true,
                    closeOnEsc: true,
                    onOpen: function onOpen(node) {
                        _this2.portalNode = node;
                        _this2._setPosition(node);
                    } },
                select
            );
        }
    }]);
    return Cascader;
}(_react2.default.Component);

exports.default = Cascader;


Cascader.propTypes = {
    triggerBy: _propTypes2.default.oneOf(['click']), // 触发方式
    type: _propTypes2.default.oneOf(['single', 'multi']), // 单选或者多选,默认为单选
    placement: _propTypes2.default.string, // 默认弹出窗口,位置 用来做计算
    data: _propTypes2.default.array.isRequired, // 数据
    defaultValue: _propTypes2.default.any, // 默认选中的值可能为数组 单选为字符||数字 多选为数组
    onChange: _propTypes2.default.func, // 父亲传入的回调
    children: _propTypes2.default.any, // select触发区域
    className: _propTypes2.default.string,
    error: _propTypes2.default.bool
};

Cascader.defaultProps = {
    triggerBy: 'click',
    placement: 'right',
    type: 'single',
    onChange: function onChange() {}
};
module.exports = exports['default'];