'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _dropdown = require('../../../dropdown');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// menu的宽度
var MenuWidth = 130;
// 每级菜单左||右偏移量
var MenuOffsetLeft = 12;
// 每级菜单上偏移是不是
var MenuOffsetTop = 32;

var buildStyle = function buildStyle() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var isSelected = arguments[1];
    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MenuWidth;

    var marginTop = 0;
    var marginLeft = 0;
    var left = 0;
    path.forEach(function (v) {
        marginTop += v.index * MenuOffsetTop + 5 - v.scrollTop;
        switch (v.direction) {
            case 'left':
                marginLeft += MenuOffsetLeft;
                left -= MenuWidth;
                break;
            case 'right':
                marginLeft -= MenuOffsetLeft;
                left += MenuWidth;
                break;
            default:
                marginLeft -= MenuOffsetLeft;
                left += MenuWidth;
        }
    });

    return {
        width: width,
        marginTop: marginTop,
        marginLeft: marginLeft,
        left: left,
        position: 'absolute'
    };
};

var Path = {
    addPath: function addPath() {
        var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var index = arguments[1];
        var level = arguments[2];
        var scrollTop = arguments[3];

        path.push({ level: level, index: index, scrollTop: scrollTop });
        return path;
    },
    // 退回到同一层的路径的上一个节点
    back: function back() {
        var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var index = arguments[1];
        var level = arguments[2];

        var start = 0;
        var end = void 0;
        for (var i = 0; i < path.length; i++) {
            if (path[i].level === level) {
                end = i;
            }
        }
        var newPath = path.slice(start, end);
        return newPath;
    }
};
var getCoordinates = function getCoordinates(visualPos) {
    // 四个顶点的坐标
    var result = {
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0,
        x3: 0,
        y3: 0,
        x4: 0,
        y4: 0
    };
    result.x1 = visualPos.left;
    result.y1 = visualPos.top;

    result.x2 = visualPos.left + visualPos.width;
    result.y2 = visualPos.top;

    result.x3 = visualPos.left + visualPos.width;
    result.y3 = visualPos.top + visualPos.height;

    result.x4 = visualPos.left;
    result.y4 = visualPos.top + visualPos.height;
    return result;
};

var SingleSelect = function (_React$Component) {
    (0, _inherits3.default)(SingleSelect, _React$Component);

    function SingleSelect(props) {
        (0, _classCallCheck3.default)(this, SingleSelect);

        var _this = (0, _possibleConstructorReturn3.default)(this, (SingleSelect.__proto__ || (0, _getPrototypeOf2.default)(SingleSelect)).call(this, props));

        var data = _this.buildDate(props.data, props.defaultValue);
        // let direction = calculateDirection(data);
        _this.state = {
            data: data, // 构建的数据结构
            path: [], // 交互中展示的路径
            select: props.defaultValue // 选中的值
            // direction                    // menu弹出方向
        };
        // this.onMouseClick = this.onMouseClick.bind(this);
        return _this;
    }

    (0, _createClass3.default)(SingleSelect, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(props) {
            var data = this.buildDate(props.data, props.defaultValue);
            this.setState({ data: data, select: props.defaultValue });
        }
    }, {
        key: 'buildDate',
        value: function buildDate(originDate, selects) {
            var data = _lodash2.default.cloneDeep(originDate);
            // 遍历所有数组,找到被选中的节点,记录每一次下标,例[0,0,1]则为array[0].children[0].children[1]的元素
            var checkChildChecked = function checkChildChecked(obj, select) {
                var indexArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

                var _indexArray = _lodash2.default.cloneDeep(indexArray);
                for (var i = 0; i < obj.length; i++) {
                    _indexArray.push(i);

                    if (obj[i].value === select) {
                        return _indexArray;
                    }

                    var _array = _lodash2.default.cloneDeep(_indexArray);
                    if (obj[i].children) {
                        var inChild = checkChildChecked(obj[i].children, select, _array);
                        if (inChild) {
                            return inChild;
                        }
                        _indexArray.pop();
                    } else {
                        _indexArray.pop();
                    }
                }
            };
            // 根据记录的选中下标,遍历数组,将最后孩子节点的的check设为true
            var setCheckedByIndex = function setCheckedByIndex(_data, _array) {
                if (_array && !_lodash2.default.isEqual(_array, []) && _data instanceof Array) {
                    var index = _array.shift();
                    if (_data[index].children) {
                        setCheckedByIndex(_data[index].children, _array);
                    } else {
                        // 没有子孩子 则设为true
                        _data[index].checked = true;
                    }
                }
            };

            var loop = function loop(_data, _p) {
                _data.forEach(function (d) {
                    if (!d.value) {
                        d.value = d.name;
                    }
                    d.parent = _p;
                    d.checked = false;
                    if (d.children) {
                        loop(d.children, d);
                    }
                });
            };
            loop(data, null);
            if (selects) {
                var indexCheckArray = checkChildChecked(data, selects, []) || [];
                setCheckedByIndex(data, indexCheckArray);
            }
            return data;
        }
        // 鼠标点击item事件

    }, {
        key: 'onMouseClick',
        value: function onMouseClick(item, e) {
            var _this2 = this;

            e.stopPropagation();
            e.preventDefault();

            var result = [];
            var findPath = function findPath(row) {
                console.log('row.value', row.value);
                result.push(row.value);
                if (row.parent) {
                    return findPath(row.parent);
                }
                return result;
            };

            findPath(item);

            if (!item.children) {
                // 在内部不更新选中数据,依赖传进来的数据
                this.props.onChange(result.reverse());
                setTimeout(function () {
                    _this2.props.closePortal();
                }, 100);
            }
        }
    }, {
        key: 'handleOnMouseOver',
        value: function handleOnMouseOver(item, pathIndex, level, e) {
            var path = this.state.path;

            var ulNode = e.currentTarget.parentElement;
            path = Path.back(path, pathIndex, level);
            path = Path.addPath(path, pathIndex, level, ulNode.scrollTop);

            this.setState({ path: path });
        }
    }, {
        key: 'buildMenuHeader',
        value: function buildMenuHeader() {
            var _this3 = this;

            var arrayDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.data;

            var content = '';
            var loop = function loop(_data) {
                _data.forEach(function (d) {
                    if (d.children) {
                        loop(d.children);
                    } else if (d.checked === true && d.parent) {
                        content = d.name;
                    }
                });
            };
            loop(arrayDate);
            if (content !== '') {
                return [_react2.default.createElement(
                    _dropdown.DropDownItem,
                    { key: 'header', className: 'mcds-select__header', onMouseOver: function onMouseOver() {
                            _this3.setState({ path: [] });
                        }, iconLeft: CheckBox },
                    content
                ), _react2.default.createElement(_dropdown.DropDownItemDivider, { key: 'divider' })];
            }
            return '';
        }
    }, {
        key: 'buildMenu',
        value: function buildMenu() {
            var _this4 = this;

            var arrayDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.data;
            var path = this.state.path;

            var header = this.buildMenuHeader();
            var menu = function menu(data, level, style) {
                var items = data.map(function (_data, index) {
                    return _react2.default.createElement(
                        _dropdown.DropDownItem,
                        {
                            isSelected: _data.checked,
                            onClick: _this4.onMouseClick.bind(_this4, _data),
                            onMouseOver: _this4.handleOnMouseOver.bind(_this4, _data, index, level),
                            iconLeft: !_data.parent && _data.checked ? CheckBox : CheckBoxPlace,
                            iconRight: _data.children ? TableIconRight : null,
                            key: index },
                        _data.name
                    );
                });
                // 有选中的header, 除了根节点,其他向下偏移 40px;
                if (header && style) {
                    style.marginTop += 40;
                }
                return _react2.default.createElement(
                    _dropdown.DropDown,
                    { className: 'mcds-select__single open', key: level, style: style },
                    _react2.default.createElement(
                        _dropdown.DropDownList,
                        null,
                        level === 0 ? header : null,
                        items
                    )
                );
            };
            // 第一层根menu level=0
            var menus = [menu(arrayDate, 0)];
            // 通过路径分别找到每一个level对应的数据.然后平行输出div;
            path.forEach(function (v, index) {
                // 每次的path,向前走一步
                var hierarchyArray = _lodash2.default.clone(path).slice(0, index + 1);
                var findChildren = function findChildren(data, array) {
                    var result = data;
                    array.forEach(function (j) {
                        result = result[j.index].children;
                    });
                    return result;
                };

                var children = findChildren(arrayDate, hierarchyArray);
                if (children) {
                    var newDir = _this4._getNewDir(index, hierarchyArray);
                    hierarchyArray[index].direction = newDir;
                    var menuNode = menu(children, index + 1, buildStyle(hierarchyArray, _this4.props.defaultValue !== null));
                    menus.push(menuNode);
                }
            });
            return menus;
        }
    }, {
        key: '_getNewDir',
        value: function _getNewDir(index, hierarchyArray) {
            var placement = this.props.placement;

            var body = document.body;
            var menuEle = this.refs.menu;
            var bodyRect = body.getBoundingClientRect();
            var menuRect = menuEle.getBoundingClientRect();
            var getMenuPos = getCoordinates(menuRect);
            var menuChildren = menuEle.children[index];
            var menuChildrenRect = menuChildren.getBoundingClientRect();
            var getPos = getCoordinates(menuChildrenRect);
            var newDir = placement;
            if (index === 0) {
                if (placement === 'right') {
                    if (getMenuPos.x2 + MenuWidth - MenuOffsetLeft > bodyRect.width) {
                        newDir = 'left';
                    }
                } else if (placement === 'left') {
                    if (getMenuPos.x1 - MenuWidth + MenuOffsetLeft < 0) {
                        newDir = 'right';
                    }
                }
            } else if (hierarchyArray[index - 1] && hierarchyArray[index - 1].direction && hierarchyArray[index - 1].direction === 'right') {
                if (getPos.x2 + MenuWidth - MenuOffsetLeft > bodyRect.width) {
                    newDir = 'left';
                } else {
                    newDir = 'right';
                }
            } else if (hierarchyArray[index - 1] && hierarchyArray[index - 1].direction && hierarchyArray[index - 1].direction === 'left') {
                if (getPos.x1 - MenuWidth + MenuOffsetLeft < 0) {
                    newDir = 'right';
                } else {
                    newDir = 'left';
                }
            }
            return newDir;
        }
    }, {
        key: 'render',
        value: function render() {
            var className = this.props.className;

            var menu = this.buildMenu();

            return _react2.default.createElement(
                'div',
                { className: (0, _classnames2.default)('mcds-select__root', className), ref: 'menu' },
                menu
            );
        }
    }]);
    return SingleSelect;
}(_react2.default.Component);

exports.default = SingleSelect;


SingleSelect.propTypes = {
    data: _propTypes2.default.array.isRequired,
    onChange: _propTypes2.default.func,
    closePortal: _propTypes2.default.func,
    width: _propTypes2.default.number,
    className: _propTypes2.default.string,
    defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    placement: _propTypes2.default.string
};

SingleSelect.defaultProps = {
    onChange: function onChange() {},
    closePortal: function closePortal() {},
    data: [],
    defaultValue: null
};
// 如果没有默认data就以这个为基础

var CheckBox = _react2.default.createElement('span', { className: 'mcds-icon__left mcds-icon__checked mcds-dropdown__checkbox mcds-icon__check-12' });
var CheckBoxPlace = _react2.default.createElement('span', { className: 'mcds-icon__left mcds-icon__checked mcds-dropdown__checkbox mcds-dropdown__checkbox-place' });
var TableIconRight = _react2.default.createElement('span', { className: 'mcds-icon__right mcds-icon__triangle-solid-14 mcds-icon__rotate-270' });
module.exports = exports['default'];