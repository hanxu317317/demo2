'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _reactMarkdown = require('react-markdown');

var _reactMarkdown2 = _interopRequireDefault(_reactMarkdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// const ReactElementToString = require('react-element-to-string');

var ColorPickerExample = function (_React$Component) {
    (0, _inherits3.default)(ColorPickerExample, _React$Component);

    function ColorPickerExample() {
        (0, _classCallCheck3.default)(this, ColorPickerExample);
        return (0, _possibleConstructorReturn3.default)(this, (ColorPickerExample.__proto__ || (0, _getPrototypeOf2.default)(ColorPickerExample)).apply(this, arguments));
    }

    (0, _createClass3.default)(ColorPickerExample, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.state = {
                displayColorPicker: false,
                color: 'FC44A9'
            };
        }
    }, {
        key: 'onShowColorPicker',
        value: function onShowColorPicker() {
            this.setState({
                displayColorPicker: true
            });
        }
    }, {
        key: 'onColorChangeComplete',
        value: function onColorChangeComplete(color) {
            var hex = color.hex;
            this.setState({
                color: hex
            });
        }
    }, {
        key: 'onClose',
        value: function onClose() {
            this.setState({
                displayColorPicker: false
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var PresetColors = ['ff3b30', 'ff9500', 'ffcc00', '3ad531', '26e4cc', '5bcaff', '007aff', '8e44fc', 'ff4981', '1f1f21'];
            var colors = PresetColors.map(function (color) {
                return '#' + color;
            });
            return _react2.default.createElement(
                'div',
                { className: 'mcds-color__setting' },
                _react2.default.createElement(_index2.default, {
                    presetColors: colors,
                    display: this.state.displayColorPicker,
                    color: '#' + this.state.color,
                    onChangeComplete: this.onColorChangeComplete.bind(this),
                    onClose: this.onClose.bind(this) }),
                _react2.default.createElement(
                    'label',
                    { onClick: this.onShowColorPicker.bind(this), className: 'mcds-color__etting-label' },
                    '\u6765\u8BD5\u8BD5\u989C\u8272\u5427',
                    _react2.default.createElement('div', { className: 'mcds-color__preview', style: { backgroundColor: '#' + this.state.color } })
                )
            );
        }
    }]);
    return ColorPickerExample;
}(_react2.default.Component);

var DataPickerExampleCode = '\nclass ColorPickerExample extends React.Component {\n    componentWillMount() {\n        this.state = {\n            displayColorPicker: false,\n            color: \'FC44A9\'\n        }       \n    }\n    onShowColorPicker() {\n        this.setState({\n            displayColorPicker: true\n        });\n    }\n    onColorChangeComplete(color) {\n        let hex = color.hex;\n        this.setState({\n            color: hex\n        })\n    }\n    onClose() {\n        this.setState({\n            displayColorPicker: false\n        });\n    }\n    render() {\n        const PresetColors = [\n            \'ff3b30\',\n            \'ff9500\',\n            \'ffcc00\',\n            \'3ad531\',\n            \'26e4cc\',\n            \'5bcaff\',\n            \'007aff\',\n            \'8e44fc\',\n            \'ff4981\',\n            \'1f1f21\'\n        ];\n        let colors = PresetColors.map(color => \'#\' + color);\n        return (\n            <div className="mcds-color__setting">\n                <ColorPicker\n                    presetColors={colors}\n                    display={this.state.displayColorPicker}\n                    color={\'#\' + this.state.color}\n                    onChangeComplete={::this.onColorChangeComplete}\n                    onClose={::this.onClose} />\n                <label onClick={::this.onShowColorPicker} className="mcds-color__etting-label">\n                    \u6765\u8BD5\u8BD5\u989C\u8272\u5427\n                    <div className="mcds-color__preview" style={{backgroundColor: \'#\' + this.state.color}}></div>\n                </label>\n            </div>\n        );\n    }\n}';

var Intro = '##### ColorPicker提供以下参数\r\n\r\n- ColorPicker\r\n\t- presetColors 基本选色（hex值通过数组形式传入）\r\n\t- display 是否显示（布尔值）\r\n\t- onClose 关闭时候的回调\t\r\n\t- onChangeComplete 改变颜色触发的函数，参数为当前组件颜色\t\r\n\t- color 当前颜色\r\n';
exports.default = [{
    id: 'ColorPicker',
    element: _react2.default.createElement(ColorPickerExample, null),
    intro: _react2.default.createElement(_reactMarkdown2.default, { className: 'markdown', source: Intro }),
    code: DataPickerExampleCode
}];
module.exports = exports['default'];