'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EditableInput = function (_React$Component) {
    (0, _inherits3.default)(EditableInput, _React$Component);

    function EditableInput(props) {
        (0, _classCallCheck3.default)(this, EditableInput);

        var _this = (0, _possibleConstructorReturn3.default)(this, (EditableInput.__proto__ || (0, _getPrototypeOf2.default)(EditableInput)).call(this));

        _this.state = {
            value: String(props.value).toUpperCase(),
            blurValue: String(props.value).toUpperCase()
        };
        return _this;
    }

    (0, _createClass3.default)(EditableInput, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var input = this.refs.input;
            if (nextProps.value !== this.state.value) {
                if (input === document.activeElement) {
                    this.setState({
                        blurValue: String(nextProps.value).toUpperCase()
                    });
                } else {
                    this.setState({
                        value: String(nextProps.value).toUpperCase()
                    });
                }
            }
        }
    }, {
        key: 'handleBlur',
        value: function handleBlur() {
            if (this.state.blurValue) {
                this.setState({
                    value: this.state.blurValue,
                    blurValue: null
                });
            }
        }
    }, {
        key: 'handleChange',
        value: function handleChange(e) {
            if (this.props.label !== null) {
                var obj = {};
                obj[this.props.label] = e.target.value;
                this.props.onChange(obj);
            } else {
                this.props.onChange(e.target.value);
            }

            this.setState({
                value: e.target.value
            });
        }
    }, {
        key: 'handleKeyDown',
        value: function handleKeyDown(e) {
            var number = Number(e.target.value);
            if (number) {
                var amount = this.props.arrowOffset || 1;

                // Up
                if (e.keyCode === 38) {
                    if (this.props.label !== null) {
                        var obj = {};
                        obj[this.props.label] = number + amount;
                        this.props.onChange(obj);
                    } else {
                        this.props.onChange(number + amount);
                    }

                    this.setState({
                        value: number + amount
                    });
                }

                // Down
                if (e.keyCode === 40) {
                    if (this.props.label !== null) {
                        var _obj = {};
                        _obj[this.props.label] = number - amount;
                        this.props.onChange(_obj);
                    } else {
                        this.props.onChange(number - amount);
                    }

                    this.setState({
                        value: number - amount
                    });
                }
            }
        }
    }, {
        key: 'handleDrag',
        value: function handleDrag(e) {
            if (this.props.dragLabel) {
                var newValue = Math.round(this.props.value + e.movementX);
                if (newValue >= 0 && newValue <= this.props.dragMax) {
                    var obj = {};
                    obj[this.props.label] = newValue;
                    this.props.onChange(obj);
                }
            }
        }
    }, {
        key: 'handleMouseDown',
        value: function handleMouseDown(e) {
            if (this.props.dragLabel) {
                e.preventDefault();
                this.handleDrag(e);
                window.addEventListener('mousemove', this.handleDrag);
                window.addEventListener('mouseup', this.handleMouseUp);
            }
        }
    }, {
        key: 'handleMouseUp',
        value: function handleMouseUp() {
            window.removeEventListener('mousemove', this.handleDrag);
            window.removeEventListener('mouseup', this.handleMouseUp);
        }
    }, {
        key: 'render',
        value: function render() {
            var label = void 0;
            var style = {
                cursor: 'ew-resize',
                input: {
                    width: '100%',
                    padding: '4px 10% 3px',
                    border: 'none',
                    boxShadow: 'inset 0 0 0 1px #ccc',
                    fontSize: '11px',
                    textAlign: 'center'
                },
                label: {
                    display: 'block',
                    textAlign: 'center',
                    fontSize: '11px',
                    color: '#222',
                    paddingTop: '3px',
                    paddingBottom: '4px',
                    textTransform: 'capitalize'
                }
            };
            if (this.props.label) {
                label = _react2.default.createElement(
                    'span',
                    { style: style.label, ref: 'label', onMouseDown: this.handleMouseDown.bind(this) },
                    this.props.label
                );
            }
            return _react2.default.createElement(
                'div',
                { style: style.wrap, ref: 'container' },
                _react2.default.createElement('input', {
                    style: style.input,
                    ref: 'input',
                    value: this.state.value,
                    onKeyDown: this.handleKeyDown.bind(this),
                    onChange: this.handleChange.bind(this),
                    onBlur: this.handleBlur.bind(this) }),
                label
            );
        }
    }]);
    return EditableInput;
}(_react2.default.Component);

EditableInput.propTypes = {
    value: _propTypes2.default.string,
    label: _propTypes2.default.string,
    onChange: _propTypes2.default.func,
    arrowOffset: _propTypes2.default.number,
    dragLabel: _propTypes2.default.string,
    dragMax: _propTypes2.default.string
};
exports.default = EditableInput;
module.exports = exports['default'];