'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Checkboard = require('./Checkboard');

var _Checkboard2 = _interopRequireDefault(_Checkboard);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Alpha = function (_React$Component) {
    (0, _inherits3.default)(Alpha, _React$Component);

    function Alpha() {
        (0, _classCallCheck3.default)(this, Alpha);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Alpha.__proto__ || (0, _getPrototypeOf2.default)(Alpha)).call(this));

        _this.handleChange = _this.handleChange.bind(_this);
        _this.handleMouseDown = _this.handleMouseDown.bind(_this);
        _this.handleMouseUp = _this.handleMouseUp.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Alpha, [{
        key: 'handleChange',
        value: function handleChange(e, skip) {
            if (!skip) {
                e.preventDefault();
            }
            var container = this.refs.container;
            var containerWidth = container.clientWidth;
            var left = (e.pageX || e.touches[0].pageX) - (container.getBoundingClientRect().left + window.pageXOffset);

            var a = void 0;
            if (left < 0) {
                a = 0;
            } else if (left > containerWidth) {
                a = 1;
            } else {
                a = Math.round(left * 100 / containerWidth) / 100;
            }

            if (this.props.a !== a) {
                this.props.onChange({ h: this.props.hsl.h, s: this.props.hsl.s, l: this.props.hsl.l, a: a });
            }
        }
    }, {
        key: 'handleMouseDown',
        value: function handleMouseDown(e) {
            this.handleChange(e, true);
            window.addEventListener('mousemove', this.handleChange);
            window.addEventListener('mouseup', this.handleMouseUp);
        }
    }, {
        key: 'handleMouseUp',
        value: function handleMouseUp() {
            window.removeEventListener('mousemove', this.handleChange);
            window.removeEventListener('mouseup', this.handleMouseUp);
        }
    }, {
        key: 'render',
        value: function render() {
            var style = {
                alpha: {
                    position: 'absolute',
                    top: '0px',
                    left: '0px',
                    right: '0px',
                    bottom: '0px',
                    borderRadius: this.props.radius
                },
                checkboard: {
                    position: 'absolute',
                    top: '0px',
                    left: '0px',
                    right: '0px',
                    bottom: '0px',
                    overflow: 'hidden'
                },
                gradient: {
                    position: 'absolute',
                    top: '0px',
                    left: '0px',
                    right: '0px',
                    bottom: '0px',
                    background: 'linear-gradient(to right, rgba(' + this.props.rgb.r + ', ' + this.props.rgb.g + ', ' + this.props.rgb.b + ', 0) 0%, rgba(' + this.props.rgb.r + ', ' + this.props.rgb.g + ', ' + this.props.rgb.b + ', 1) 100%)',
                    boxShadow: this.props.shadow,
                    borderRadius: this.props.radius
                },
                container: {
                    position: 'relative',
                    zIndex: '2',
                    height: '100%',
                    margin: '0 3px'
                },
                pointer: {
                    zIndex: '2',
                    position: 'absolute',
                    left: this.props.rgb.a * 100 + '%'
                },
                slider: {
                    width: '4px',
                    borderRadius: '1px',
                    height: '8px',
                    boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
                    background: '#fff',
                    marginTop: '1px',
                    transform: 'translateX(-2px)'
                }
            };
            if (this.props.pointer) {
                pointer = _react2.default.createElement(this.props.pointer, this.props);
            }
            var pointer = _react2.default.createElement('div', { style: style.slider });
            return _react2.default.createElement(
                'div',
                { style: style.alpha },
                _react2.default.createElement(
                    'div',
                    { style: style.checkboard },
                    _react2.default.createElement(_Checkboard2.default, null)
                ),
                _react2.default.createElement('div', { style: style.gradient }),
                _react2.default.createElement(
                    'div',
                    { style: style.container, ref: 'container', onMouseDown: this.handleMouseDown, onTouchMove: this.handleChange },
                    _react2.default.createElement(
                        'div',
                        { style: style.pointer, ref: 'pointer' },
                        pointer
                    )
                )
            );
        }
    }]);
    return Alpha;
}(_react2.default.Component);

Alpha.propTypes = {
    a: _propTypes2.default.number,
    onChange: _propTypes2.default.func,
    hsl: _propTypes2.default.object,
    rgb: _propTypes2.default.object,
    radius: _propTypes2.default.string,
    shadow: _propTypes2.default.string,
    pointer: _propTypes2.default.object
};
exports.default = Alpha;
module.exports = exports['default'];