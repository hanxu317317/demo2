'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _merge = require('./../utils/merge');

var _merge2 = _interopRequireDefault(_merge);

var _color = require('./../utils/color');

var _color2 = _interopRequireDefault(_color);

var _sketch = require('./sketch');

var _sketch2 = _interopRequireDefault(_sketch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ColorPicker = function (_React$Component) {
    (0, _inherits3.default)(ColorPicker, _React$Component);

    function ColorPicker(props) {
        (0, _classCallCheck3.default)(this, ColorPicker);

        var _this = (0, _possibleConstructorReturn3.default)(this, (ColorPicker.__proto__ || (0, _getPrototypeOf2.default)(ColorPicker)).call(this));

        _this.state = (0, _merge2.default)(_color2.default.toState(props.color, 0), {
            visible: props.display
        });
        _this.debounce = _lodash2.default.debounce(function (fn, data) {
            fn(data);
        }, 100);
        _this.handleChange = _this.handleChange.bind(_this);
        _this.handleHide = _this.handleHide.bind(_this);
        _this.handleAccept = _this.handleAccept.bind(_this);
        _this.handleCancel = _this.handleCancel.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(ColorPicker, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.setState((0, _merge2.default)(_color2.default.toState(nextProps.color, this.state.oldHue), {
                visible: nextProps.display
            }));
        }
    }, {
        key: 'handleHide',
        value: function handleHide() {
            if (this.state.visible === true) {
                this.setState({
                    visible: false
                });
                if (this.props.onClose) {
                    this.props.onClose({
                        hex: this.state.hex,
                        hsl: this.state.hsl,
                        rgb: this.state.rgb
                    });
                }
            }
        }
    }, {
        key: 'handleAccept',
        value: function handleAccept() {
            this.handleHide();
        }
    }, {
        key: 'handleCancel',
        value: function handleCancel() {
            if (this.state.visible === true) {
                this.setState({
                    visible: false
                });
            }
        }
    }, {
        key: 'handleChange',
        value: function handleChange(value) {
            var data = _color2.default.simpleCheckForValidColor(value);
            if (data) {
                var colors = _color2.default.toState(data, data.h || this.state.oldHue);
                this.setState(colors);
                if (this.props.onChangeComplete) {
                    this.debounce(this.props.onChangeComplete, colors);
                }
                if (this.props.onChange) {
                    this.props.onChange(colors);
                }
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var style = {
                picker: {
                    zIndex: '2',
                    position: 'relative'
                },
                cover: {
                    position: 'fixed',
                    top: '0px',
                    bottom: '0px',
                    left: '0px',
                    right: '0px'
                }
            };
            if (this.state.visible === true) {
                // 选色框的位置，可以手动改这里
                var vStyle = {
                    wrap: {
                        zIndex: '999',
                        position: 'absolute',
                        display: 'block',
                        left: '10%',
                        marginLeft: '20px',
                        top: '100px'
                    }
                };
                var comStyle = style;
                style = (0, _merge2.default)(comStyle, vStyle);
            } else if (this.state.visible === false) {
                var _vStyle = {
                    wrap: {
                        zIndex: '999',
                        position: 'absolute',
                        display: 'none'
                    }
                };
                var _comStyle = style;
                style = (0, _merge2.default)(_comStyle, _vStyle);
            }
            return _react2.default.createElement(
                'div',
                { style: style.wrap },
                _react2.default.createElement(
                    'div',
                    { style: style.picker },
                    _react2.default.createElement(_sketch2.default, (0, _extends3.default)({}, this.props, this.state, { onChange: this.handleChange, onAccept: this.handleAccept, onCancel: this.handleCancel }))
                ),
                _react2.default.createElement('div', { style: style.cover, onClick: this.handleHide })
            );
        }
    }]);
    return ColorPicker;
}(_react2.default.Component);

ColorPicker.propTypes = {
    color: _propTypes2.default.string,
    display: _propTypes2.default.bool,
    onClose: _propTypes2.default.func,
    onChangeComplete: _propTypes2.default.func,
    onChange: _propTypes2.default.func
};
exports.default = ColorPicker;

ColorPicker.defaultProps = {
    color: {
        h: 250,
        s: 0.50,
        l: 0.20,
        a: 1
    },
    display: true,
    rgba: 'hide'
};
module.exports = exports['default'];