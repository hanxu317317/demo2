'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SketchPresetColors = function (_React$Component) {
    (0, _inherits3.default)(SketchPresetColors, _React$Component);

    function SketchPresetColors() {
        (0, _classCallCheck3.default)(this, SketchPresetColors);

        var _this = (0, _possibleConstructorReturn3.default)(this, (SketchPresetColors.__proto__ || (0, _getPrototypeOf2.default)(SketchPresetColors)).call(this));

        _this.handleClick = _this.handleClick.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(SketchPresetColors, [{
        key: 'handleClick',
        value: function handleClick(hex) {
            this.props.onClick(hex);
        }
    }, {
        key: 'render',
        value: function render() {
            var colors = [];
            var style = {};
            if (!this.props.colors || !this.props.colors.length) {
                style = {
                    colors: {
                        display: 'none'
                    },
                    li: {
                        borderRadius: '3px',
                        overflow: 'hidden',
                        position: 'relative',
                        display: 'inline-block',
                        margin: '0 10px 10px 0',
                        verticalAlign: 'top',
                        cursor: 'pointer'
                    },
                    square: {
                        borderRadius: '3px',
                        width: '16px',
                        height: '16px',
                        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)'
                    }
                };
            } else {
                style = {
                    colors: {
                        marginRight: '-10px',
                        marginLeft: '-10px',
                        paddingLeft: '10px',
                        paddingTop: '10px',
                        borderTop: '1px solid #eee'
                    },
                    li: {
                        borderRadius: '3px',
                        overflow: 'hidden',
                        position: 'relative',
                        display: 'inline-block',
                        margin: '0 10px 10px 0',
                        verticalAlign: 'top',
                        cursor: 'pointer'
                    },
                    square: {
                        borderRadius: '3px',
                        width: '16px',
                        height: '16px',
                        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)'
                    }
                };
            }
            if (this.props.colors) {
                for (var i = 0; i < this.props.colors.length; i++) {
                    var color = this.props.colors[i];
                    colors.push(_react2.default.createElement(
                        'div',
                        { key: color, style: style.li, ref: color, onClick: this.handleClick.bind(null, color) },
                        _react2.default.createElement(
                            'div',
                            { style: { background: color } },
                            _react2.default.createElement('div', { style: style.square })
                        )
                    ));
                }
            }
            return _react2.default.createElement(
                'div',
                { style: style.colors },
                colors
            );
        }
    }]);
    return SketchPresetColors;
}(_react2.default.Component);

SketchPresetColors.propTypes = {
    onClick: _propTypes2.default.func,
    colors: _propTypes2.default.array
};
exports.default = SketchPresetColors;
module.exports = exports['default'];