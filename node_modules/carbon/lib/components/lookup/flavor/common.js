'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _dropdown = require('../../dropdown');

var _form = require('../../form');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Single = 'single';
var Multi = 'multi';
var emptyDefault = _react2.default.createElement(
    'div',
    null,
    ' empty '
);

var buildObejctName = function buildObejctName(param) {
    if (typeof param === 'string') {
        return param;
    }

    if (_lodash2.default.isArray(param)) {
        return param[0].value;
    }
};

var Lookup = function (_React$Component) {
    (0, _inherits3.default)(Lookup, _React$Component);

    function Lookup(props) {
        (0, _classCallCheck3.default)(this, Lookup);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Lookup.__proto__ || (0, _getPrototypeOf2.default)(Lookup)).call(this, props));

        var _this$buildState = _this.buildState(true, props),
            valueStack = _this$buildState.valueStack,
            objectStack = _this$buildState.objectStack;

        var objName = buildObejctName(props.objectList || props.objName);
        _this.state = {
            objName: objName,
            valueStack: valueStack,
            active: false, // 组件是否处于编辑的状态
            searchListOpen: false, // 搜索的下拉是否处理激活的状态
            data: props.data,
            objectStack: objectStack
        };
        _this.handleOutsideMouseClick = _this.handleOutsideMouseClick.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Lookup, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            document.addEventListener('mouseup', this.handleOutsideMouseClick);
            document.addEventListener('touchstart', this.handleOutsideMouseClick);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var oldData = this.state.data;
            var newData = nextProps.data;
            if (!_lodash2.default.isEqual(oldData, newData)) {
                this.setState({ data: newData });
            }

            if (!_lodash2.default.isEqual(nextProps.value, this.props.value)) {
                var _buildState = this.buildState(false, nextProps),
                    valueStack = _buildState.valueStack,
                    objectStack = _buildState.objectStack;

                this.setState({
                    valueStack: valueStack,
                    objectStack: objectStack
                });
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            document.removeEventListener('mouseup', this.handleOutsideMouseClick);
            document.removeEventListener('touchstart', this.handleOutsideMouseClick);
        }
    }, {
        key: 'buildState',
        value: function buildState() {
            var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;
            var defaultValue = props.defaultValue,
                value = props.value;


            if (!init || !_lodash2.default.isUndefined([value])) {
                defaultValue = value || [];
            }
            var valueStack = new _set2.default();
            var objectStack = {};

            _lodash2.default.map(defaultValue, function (v) {
                if (v && v.id) {
                    valueStack.add(v.id);
                    objectStack[v.id] = v;
                }
            });
            return {
                valueStack: valueStack,
                objectStack: objectStack
            };
        }

        // 下拉数据开关的控制

    }, {
        key: 'searchListTrigger',
        value: function searchListTrigger() {
            var open = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var trigger = this.refs.searchListTrigger;
            if (open) {
                trigger.open();
            } else {
                trigger.close();
            }
        }
    }, {
        key: 'handleSearchListTriggerState',
        value: function handleSearchListTriggerState() {
            var searchListOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            this.setState({ searchListOpen: searchListOpen });
            // 当下拉展示的时候,显示左侧的对象列表
            if (searchListOpen) {
                this.setState({ active: true });
            }
        }
    }, {
        key: 'handleObjectListTriggerState',
        value: function handleObjectListTriggerState() {
            var objectListOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            this.setState({ objectListOpen: objectListOpen });
            if (objectListOpen) {
                this.setState({ active: true });
            }
        }
    }, {
        key: 'handleOnChange',
        value: function handleOnChange() {
            var _state = this.state,
                valueStack = _state.valueStack,
                objectStack = _state.objectStack,
                objName = _state.objName;

            var result = [];
            var setObj = valueStack;

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(setObj.values()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var item = _step.value;

                    result.push(item);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.props.onChange({ objName: objName, result: result, objectStack: objectStack });
        }
    }, {
        key: 'handleOutsideMouseClick',
        value: function handleOutsideMouseClick(e) {
            if (!this.state.searchListOpen || !this.state.active) {
                return;
            }
            var root = this.refs.searchList;
            if (root.contains(e.target) || e.button && e.button !== 0) {
                return;
            }
            e.stopPropagation();
            this.searchListTrigger(false);
            this.setState({ active: false });
        }

        // 搜索列表内容点击事件

    }, {
        key: 'handleSearchListClick',
        value: function handleSearchListClick(id) {
            var _this2 = this;

            var _state2 = this.state,
                valueStack = _state2.valueStack,
                objectStack = _state2.objectStack,
                data = _state2.data;
            var type = this.props.type;

            if (valueStack.has(id)) {
                return false;
            }

            if (type === Single) {
                valueStack = new _set2.default();
                objectStack = {};
                objectStack[id] = _lodash2.default.find(data, function (v) {
                    return v.id === id;
                });
                valueStack = valueStack.add(id);
            }
            if (type === Multi) {
                valueStack = valueStack.add(id);
                objectStack[id] = _lodash2.default.find(data, function (v) {
                    return v.id === id;
                });
            }

            this.setState({
                valueStack: valueStack,
                objectStack: objectStack
            }, function () {
                _this2.handleOnChange();
            });
        }

        // 对象列表触发图标的fclick事件

    }, {
        key: 'handleObjectListTriggerClick',
        value: function handleObjectListTriggerClick(e) {
            e.preventDefault();
            e.stopPropagation();
            this.searchListTrigger(false);
        }

        // 搜索框按键

    }, {
        key: 'handleSearchKeydown',
        value: function handleSearchKeydown(e) {
            var result = {};
            result.event = e;
            result.value = e.target.value;
            result.objName = this.state.objName;

            e.stopPropagation();
            this.props.onKeyDown(result);
        }
        // 搜索框得到焦点

    }, {
        key: 'handleSearchOnFocuse',
        value: function handleSearchOnFocuse(e) {
            e.preventDefault();
            e.stopPropagation();
            this.refs.searchListTrigger.open();
        }

        // 删除已选中数据

    }, {
        key: 'handleSelectItemClose',
        value: function handleSelectItemClose(id, e) {
            var _this3 = this;

            e.stopPropagation();
            var _state3 = this.state,
                valueStack = _state3.valueStack,
                objectStack = _state3.objectStack;

            if (!valueStack.delete(id)) {
                return false;
            }

            delete objectStack[id];

            this.setState({
                valueStack: valueStack,
                objectStack: objectStack
            }, function () {
                _this3.handleOnChange();
            });
        }
    }, {
        key: 'renderSeachListCell',
        value: function renderSeachListCell(_ref) {
            var avatar = _ref.avatar,
                name = _ref.name,
                id = _ref.id;

            return _react2.default.createElement(
                _dropdown.DropDownItem,
                { key: id, onClick: this.handleSearchListClick.bind(this, id) },
                _react2.default.createElement(
                    'div',
                    { className: 'mcds-tile mcds-media' },
                    _react2.default.createElement(
                        'div',
                        { className: (0, _classnames2.default)('mcds-media__figure', { hide: !avatar }) },
                        _react2.default.createElement(
                            'span',
                            { className: 'mcds-avatar mcds-avatar__medium mcds-avatar__circle mcds-lookup__avatar' },
                            _react2.default.createElement('img', { src: avatar })
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'mcds-media__body mcds-tile__detail' },
                        _react2.default.createElement(
                            'h3',
                            { className: 'mcds-truncate mcds-tile__head mcds-text__default mcds-text__size-12', title: 'title' },
                            name
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: 'mcds-tile__detail' },
                            _react2.default.createElement(
                                'ul',
                                { className: 'mcds-tile__detail-list' },
                                _react2.default.createElement(
                                    'li',
                                    { className: 'mcds-tile__item mcds-tile__detail-weak mcds-text__weak mcds-truncate' },
                                    name
                                )
                            )
                        )
                    )
                )
            );
        }
    }, {
        key: 'renderSelectItemsOnInput',
        value: function renderSelectItemsOnInput() {
            return this._renderSelectItems();
        }
    }, {
        key: 'renderSelectItemsOnInputBottom',
        value: function renderSelectItemsOnInputBottom() {
            var items = this._renderSelectItems();

            if (!items) {
                return null;
            }

            return _react2.default.createElement(
                'div',
                { className: 'mcds-media mcds-divider__top mcds-lookup__row mcds-p__l-5' },
                items
            );
        }
    }, {
        key: '_renderSelectItems',
        value: function _renderSelectItems() {
            var _this4 = this;

            var valueStack = this.state.valueStack;
            var type = this.props.type;

            var data = this.state.objectStack;

            if (valueStack.size === 0) {
                return null;
            }
            var items = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                var _loop = function _loop() {
                    var i = _step2.value;

                    var item = _lodash2.default.find(data, function (v) {
                        return v && v.id === i;
                    });

                    if (item) {
                        items.push(_react2.default.createElement(
                            'li',
                            { key: i, className: 'mcds-list__item mcds-lookup__item mcds-m__r-5' },
                            _react2.default.createElement(
                                'div',
                                { className: 'mcds-media' },
                                item.avatar ? _react2.default.createElement(
                                    'div',
                                    { className: 'mcds-media__figure mcds-avatar mcds-avatar__size-18 mcds-lookup__avatar' },
                                    _react2.default.createElement('img', { src: item.avatar })
                                ) : null,
                                _react2.default.createElement(
                                    'div',
                                    { className: 'mcds-media__body mcds-truncate' },
                                    item.name || item.Name
                                ),
                                _react2.default.createElement(
                                    'div',
                                    { className: 'mcds-lookup__close mcds-m__l-5' },
                                    _react2.default.createElement(
                                        'div',
                                        { onClick: _this4.handleSelectItemClose.bind(_this4, i), className: 'mcds-icon__container mcds-icon__container-14 mcds-icon__container-noborder mcds-m__t-3' },
                                        _react2.default.createElement('span', { className: 'mcds-icon__close-line-20' })
                                    )
                                )
                            )
                        ));
                    }
                };

                for (var _iterator2 = (0, _getIterator3.default)(valueStack), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return _react2.default.createElement(
                'ul',
                { className: (0, _classnames2.default)('mcds-list mcds-list__horizontal mcds-lookup__row-list', { 'mcds-lookup__single': type === Single }) },
                items
            );
        }
    }, {
        key: 'renderSearchList',
        value: function renderSearchList() {
            var _this5 = this;

            var data = this.state.data;
            var empty = this.props.empty;

            var items = [];
            _lodash2.default.map(data, function (v) {
                items.push(_this5.renderSeachListCell(v));
            });

            if (items && items.length === 0) {
                items = empty;
            }

            return _react2.default.createElement(
                _dropdown.DropDownList,
                null,
                items
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _state4 = this.state,
                searchListOpen = _state4.searchListOpen,
                valueStack = _state4.valueStack,
                active = _state4.active;
            var _props = this.props,
                type = _props.type,
                error = _props.error;

            var wrapClass = (0, _classnames2.default)({ 'mcds-lookup__active': active });
            var inputClassName = (0, _classnames2.default)('mcds-layout__item', { hide: valueStack.size && type === Single && !searchListOpen });

            var placeholder = this.props.placeholder;
            return _react2.default.createElement(
                'div',
                { ref: 'searchList', className: wrapClass },
                _react2.default.createElement(
                    _dropdown.DropDownTrigger,
                    {
                        target: 'body',
                        synchWidth: true,
                        className: 'mcds-lookup',
                        ref: 'searchListTrigger',
                        placement: 'bottom-right',
                        closeOnOutsideClick: false,
                        onOpen: this.handleSearchListTriggerState.bind(this, true),
                        onClose: this.handleSearchListTriggerState.bind(this, false) },
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            { ref: 'looup_div', tabIndex: '0', className: (0, _classnames2.default)('mcds-layout__column mcds-p__t-4 mcds-p__l-4 mcds-p__r-4 mcds-p__b-4 mcds-lookup__row', { 'mcds-element__border': error }) },
                            _react2.default.createElement(_form.Input, {
                                active: this.props.active,
                                className: inputClassName,
                                autoComplete: 'off',
                                type: 'text',
                                iconRight: _react2.default.createElement('span', { className: 'mcds-icon__search-line-20' }),
                                placeholder: placeholder,
                                onClick: this.handleSearchOnFocuse.bind(this),
                                onKeyUp: this.handleSearchKeydown.bind(this) }),
                            !searchListOpen ? this.renderSelectItemsOnInput() : null
                        )
                    ),
                    _react2.default.createElement(
                        _dropdown.DropDown,
                        { className: 'mcds-lookup__list' },
                        this.renderSearchList()
                    )
                )
            );
        }
    }]);
    return Lookup;
}(_react2.default.Component);

Lookup.defaultProps = {
    objectList: [],
    onKeyDown: function onKeyDown() {}
};
exports.default = Lookup;


Lookup.propTypes = {
    onKeyDown: _propTypes2.default.func,
    onChange: _propTypes2.default.func,
    type: _propTypes2.default.oneOf([Single, Multi]), // 单选或者多选,默认为单选
    placeholder: _propTypes2.default.string,
    objName: _propTypes2.default.string,
    className: _propTypes2.default.string,
    data: _propTypes2.default.array,
    defaultValue: _propTypes2.default.array, // 初始化默认的值,只使用一次
    value: _propTypes2.default.array, // 一直可以更新变化的值
    objectList: _propTypes2.default.array,
    error: _propTypes2.default.bool,
    empty: _propTypes2.default.element,
    active: _propTypes2.default.bool
};

Lookup.defaultProps = {
    onChange: function onChange() {},
    defaultValue: [],
    type: 'single',
    placeholder: 'placeholder',
    empty: emptyDefault
};
module.exports = exports['default'];